// This file was auto-generated by codegen! Do not edit!

use crate::Result;
use crate::SonosDevice;

pub mod av_transport {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "AVTransport", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:AVTransport:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddMultipleURIsToQueue", ns(SERVICE_NS))]
    pub struct AddMultipleUrisToQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "NumberOfURIs", ns(""))]
        pub number_of_uris: u32,
        #[xml(rename = "EnqueuedURIs", ns(""))]
        pub enqueued_uris: String,
        #[xml(rename = "EnqueuedURIsMetaData", ns(""))]
        pub enqueued_uris_meta_data: String,
        #[xml(rename = "ContainerURI", ns(""))]
        pub container_uri: String,
        #[xml(rename = "ContainerMetaData", ns(""))]
        pub container_meta_data: String,
        #[xml(rename = "DesiredFirstTrackNumberEnqueued", ns(""))]
        pub desired_first_track_number_enqueued: u32,
        #[xml(rename = "EnqueueAsNext", ns(""))]
        pub enqueue_as_next: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddMultipleURIsToQueueResponse", ns(SERVICE_NS))]
    pub struct AddMultipleUrisToQueueResponse {
        #[xml(rename = "FirstTrackNumberEnqueued", ns(""))]
        pub first_track_number_enqueued: Option<u32>,
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddURIToQueue", ns(SERVICE_NS))]
    pub struct AddUriToQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "EnqueuedURI", ns(""))]
        pub enqueued_uri: String,
        #[xml(rename = "EnqueuedURIMetaData", ns(""))]
        pub enqueued_uri_meta_data: String,
        #[xml(rename = "DesiredFirstTrackNumberEnqueued", ns(""))]
        pub desired_first_track_number_enqueued: u32,
        #[xml(rename = "EnqueueAsNext", ns(""))]
        pub enqueue_as_next: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddURIToQueueResponse", ns(SERVICE_NS))]
    pub struct AddUriToQueueResponse {
        #[xml(rename = "FirstTrackNumberEnqueued", ns(""))]
        pub first_track_number_enqueued: Option<u32>,
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddURIToSavedQueue", ns(SERVICE_NS))]
    pub struct AddUriToSavedQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "EnqueuedURI", ns(""))]
        pub enqueued_uri: String,
        #[xml(rename = "EnqueuedURIMetaData", ns(""))]
        pub enqueued_uri_meta_data: String,
        #[xml(rename = "AddAtIndex", ns(""))]
        pub add_at_index: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddURIToSavedQueueResponse", ns(SERVICE_NS))]
    pub struct AddUriToSavedQueueResponse {
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "BackupQueue", ns(SERVICE_NS))]
    pub struct BackupQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "BecomeCoordinatorOfStandaloneGroup", ns(SERVICE_NS))]
    pub struct BecomeCoordinatorOfStandaloneGroupRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "BecomeCoordinatorOfStandaloneGroupResponse", ns(SERVICE_NS))]
    pub struct BecomeCoordinatorOfStandaloneGroupResponse {
        #[xml(rename = "DelegatedGroupCoordinatorID", ns(""))]
        pub delegated_group_coordinator_id: Option<String>,
        #[xml(rename = "NewGroupID", ns(""))]
        pub new_group_id: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "BecomeGroupCoordinator", ns(SERVICE_NS))]
    pub struct BecomeGroupCoordinatorRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CurrentCoordinator", ns(""))]
        pub current_coordinator: String,
        #[xml(rename = "CurrentGroupID", ns(""))]
        pub current_group_id: String,
        #[xml(rename = "OtherMembers", ns(""))]
        pub other_members: String,
        #[xml(rename = "TransportSettings", ns(""))]
        pub transport_settings: String,
        #[xml(rename = "CurrentURI", ns(""))]
        pub current_uri: String,
        #[xml(rename = "CurrentURIMetaData", ns(""))]
        pub current_uri_meta_data: String,
        #[xml(rename = "SleepTimerState", ns(""))]
        pub sleep_timer_state: String,
        #[xml(rename = "AlarmState", ns(""))]
        pub alarm_state: String,
        #[xml(rename = "StreamRestartState", ns(""))]
        pub stream_restart_state: String,
        #[xml(rename = "CurrentQueueTrackList", ns(""))]
        pub current_queue_track_list: String,
        #[xml(rename = "CurrentVLIState", ns(""))]
        pub current_vli_state: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "BecomeGroupCoordinatorAndSource", ns(SERVICE_NS))]
    pub struct BecomeGroupCoordinatorAndSourceRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CurrentCoordinator", ns(""))]
        pub current_coordinator: String,
        #[xml(rename = "CurrentGroupID", ns(""))]
        pub current_group_id: String,
        #[xml(rename = "OtherMembers", ns(""))]
        pub other_members: String,
        #[xml(rename = "CurrentURI", ns(""))]
        pub current_uri: String,
        #[xml(rename = "CurrentURIMetaData", ns(""))]
        pub current_uri_meta_data: String,
        #[xml(rename = "SleepTimerState", ns(""))]
        pub sleep_timer_state: String,
        #[xml(rename = "AlarmState", ns(""))]
        pub alarm_state: String,
        #[xml(rename = "StreamRestartState", ns(""))]
        pub stream_restart_state: String,
        #[xml(rename = "CurrentAVTTrackList", ns(""))]
        pub current_avt_track_list: String,
        #[xml(rename = "CurrentQueueTrackList", ns(""))]
        pub current_queue_track_list: String,
        #[xml(rename = "CurrentSourceState", ns(""))]
        pub current_source_state: String,
        #[xml(rename = "ResumePlayback", ns(""))]
        pub resume_playback: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ChangeCoordinator", ns(SERVICE_NS))]
    pub struct ChangeCoordinatorRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CurrentCoordinator", ns(""))]
        pub current_coordinator: String,
        #[xml(rename = "NewCoordinator", ns(""))]
        pub new_coordinator: String,
        #[xml(rename = "NewTransportSettings", ns(""))]
        pub new_transport_settings: String,
        #[xml(rename = "CurrentAVTransportURI", ns(""))]
        pub current_av_transport_uri: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ChangeTransportSettings", ns(SERVICE_NS))]
    pub struct ChangeTransportSettingsRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "NewTransportSettings", ns(""))]
        pub new_transport_settings: String,
        #[xml(rename = "CurrentAVTransportURI", ns(""))]
        pub current_av_transport_uri: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ConfigureSleepTimer", ns(SERVICE_NS))]
    pub struct ConfigureSleepTimerRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "NewSleepTimerDuration", ns(""))]
        pub new_sleep_timer_duration: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CreateSavedQueue", ns(SERVICE_NS))]
    pub struct CreateSavedQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Title", ns(""))]
        pub title: String,
        #[xml(rename = "EnqueuedURI", ns(""))]
        pub enqueued_uri: String,
        #[xml(rename = "EnqueuedURIMetaData", ns(""))]
        pub enqueued_uri_meta_data: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "CreateSavedQueueResponse", ns(SERVICE_NS))]
    pub struct CreateSavedQueueResponse {
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "AssignedObjectID", ns(""))]
        pub assigned_object_id: Option<String>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "DelegateGroupCoordinationTo", ns(SERVICE_NS))]
    pub struct DelegateGroupCoordinationToRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "NewCoordinator", ns(""))]
        pub new_coordinator: String,
        #[xml(rename = "RejoinGroup", ns(""))]
        pub rejoin_group: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "EndDirectControlSession", ns(SERVICE_NS))]
    pub struct EndDirectControlSessionRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetCrossfadeMode", ns(SERVICE_NS))]
    pub struct GetCrossfadeModeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetCrossfadeModeResponse", ns(SERVICE_NS))]
    pub struct GetCrossfadeModeResponse {
        #[xml(rename = "CrossfadeMode", ns(""))]
        pub crossfade_mode: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetCurrentTransportActions", ns(SERVICE_NS))]
    pub struct GetCurrentTransportActionsRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetCurrentTransportActionsResponse", ns(SERVICE_NS))]
    pub struct GetCurrentTransportActionsResponse {
        #[xml(rename = "Actions", ns(""))]
        pub actions: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetDeviceCapabilities", ns(SERVICE_NS))]
    pub struct GetDeviceCapabilitiesRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetDeviceCapabilitiesResponse", ns(SERVICE_NS))]
    pub struct GetDeviceCapabilitiesResponse {
        #[xml(rename = "PlayMedia", ns(""))]
        pub play_media: Option<String>,
        #[xml(rename = "RecMedia", ns(""))]
        pub rec_media: Option<String>,
        #[xml(rename = "RecQualityModes", ns(""))]
        pub rec_quality_modes: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetMediaInfo", ns(SERVICE_NS))]
    pub struct GetMediaInfoRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetMediaInfoResponse", ns(SERVICE_NS))]
    pub struct GetMediaInfoResponse {
        #[xml(rename = "NrTracks", ns(""))]
        pub nr_tracks: Option<u32>,
        #[xml(rename = "MediaDuration", ns(""))]
        pub media_duration: Option<String>,
        #[xml(rename = "CurrentURI", ns(""))]
        pub current_uri: Option<String>,
        #[xml(rename = "CurrentURIMetaData", ns(""))]
        pub current_uri_meta_data: Option<String>,
        #[xml(rename = "NextURI", ns(""))]
        pub next_uri: Option<String>,
        #[xml(rename = "NextURIMetaData", ns(""))]
        pub next_uri_meta_data: Option<String>,
        #[xml(rename = "PlayMedium", ns(""))]
        pub play_medium: Option<String>,
        #[xml(rename = "RecordMedium", ns(""))]
        pub record_medium: Option<String>,
        #[xml(rename = "WriteStatus", ns(""))]
        pub write_status: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetPositionInfo", ns(SERVICE_NS))]
    pub struct GetPositionInfoRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetPositionInfoResponse", ns(SERVICE_NS))]
    pub struct GetPositionInfoResponse {
        #[xml(rename = "Track", ns(""))]
        pub track: Option<u32>,
        #[xml(rename = "TrackDuration", ns(""))]
        pub track_duration: Option<String>,
        #[xml(rename = "TrackMetaData", ns(""))]
        pub track_meta_data: Option<String>,
        #[xml(rename = "TrackURI", ns(""))]
        pub track_uri: Option<String>,
        #[xml(rename = "RelTime", ns(""))]
        pub rel_time: Option<String>,
        #[xml(rename = "AbsTime", ns(""))]
        pub abs_time: Option<String>,
        #[xml(rename = "RelCount", ns(""))]
        pub rel_count: Option<i32>,
        #[xml(rename = "AbsCount", ns(""))]
        pub abs_count: Option<i32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetRemainingSleepTimerDuration", ns(SERVICE_NS))]
    pub struct GetRemainingSleepTimerDurationRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetRemainingSleepTimerDurationResponse", ns(SERVICE_NS))]
    pub struct GetRemainingSleepTimerDurationResponse {
        #[xml(rename = "RemainingSleepTimerDuration", ns(""))]
        pub remaining_sleep_timer_duration: Option<String>,
        #[xml(rename = "CurrentSleepTimerGeneration", ns(""))]
        pub current_sleep_timer_generation: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetRunningAlarmProperties", ns(SERVICE_NS))]
    pub struct GetRunningAlarmPropertiesRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetRunningAlarmPropertiesResponse", ns(SERVICE_NS))]
    pub struct GetRunningAlarmPropertiesResponse {
        #[xml(rename = "AlarmID", ns(""))]
        pub alarm_id: Option<u32>,
        #[xml(rename = "GroupID", ns(""))]
        pub group_id: Option<String>,
        #[xml(rename = "LoggedStartTime", ns(""))]
        pub logged_start_time: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetTransportInfo", ns(SERVICE_NS))]
    pub struct GetTransportInfoRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTransportInfoResponse", ns(SERVICE_NS))]
    pub struct GetTransportInfoResponse {
        #[xml(rename = "CurrentTransportState", ns(""))]
        pub current_transport_state: Option<String>,
        #[xml(rename = "CurrentTransportStatus", ns(""))]
        pub current_transport_status: Option<String>,
        #[xml(rename = "CurrentSpeed", ns(""))]
        pub current_speed: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetTransportSettings", ns(SERVICE_NS))]
    pub struct GetTransportSettingsRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTransportSettingsResponse", ns(SERVICE_NS))]
    pub struct GetTransportSettingsResponse {
        #[xml(rename = "PlayMode", ns(""))]
        pub play_mode: Option<String>,
        #[xml(rename = "RecQualityMode", ns(""))]
        pub rec_quality_mode: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Next", ns(SERVICE_NS))]
    pub struct NextRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "NotifyDeletedURI", ns(SERVICE_NS))]
    pub struct NotifyDeletedUriRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DeletedURI", ns(""))]
        pub deleted_uri: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Pause", ns(SERVICE_NS))]
    pub struct PauseRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Play", ns(SERVICE_NS))]
    pub struct PlayRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Speed", ns(""))]
        pub speed: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Previous", ns(SERVICE_NS))]
    pub struct PreviousRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveAllTracksFromQueue", ns(SERVICE_NS))]
    pub struct RemoveAllTracksFromQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveTrackFromQueue", ns(SERVICE_NS))]
    pub struct RemoveTrackFromQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveTrackRangeFromQueue", ns(SERVICE_NS))]
    pub struct RemoveTrackRangeFromQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "NumberOfTracks", ns(""))]
        pub number_of_tracks: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "RemoveTrackRangeFromQueueResponse", ns(SERVICE_NS))]
    pub struct RemoveTrackRangeFromQueueResponse {
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReorderTracksInQueue", ns(SERVICE_NS))]
    pub struct ReorderTracksInQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "NumberOfTracks", ns(""))]
        pub number_of_tracks: u32,
        #[xml(rename = "InsertBefore", ns(""))]
        pub insert_before: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReorderTracksInSavedQueue", ns(SERVICE_NS))]
    pub struct ReorderTracksInSavedQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "TrackList", ns(""))]
        pub track_list: String,
        #[xml(rename = "NewPositionList", ns(""))]
        pub new_position_list: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ReorderTracksInSavedQueueResponse", ns(SERVICE_NS))]
    pub struct ReorderTracksInSavedQueueResponse {
        #[xml(rename = "QueueLengthChange", ns(""))]
        pub queue_length_change: Option<i32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RunAlarm", ns(SERVICE_NS))]
    pub struct RunAlarmRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "AlarmID", ns(""))]
        pub alarm_id: u32,
        #[xml(rename = "LoggedStartTime", ns(""))]
        pub logged_start_time: String,
        #[xml(rename = "Duration", ns(""))]
        pub duration: String,
        #[xml(rename = "ProgramURI", ns(""))]
        pub program_uri: String,
        #[xml(rename = "ProgramMetaData", ns(""))]
        pub program_meta_data: String,
        #[xml(rename = "PlayMode", ns(""))]
        pub play_mode: String,
        #[xml(rename = "Volume", ns(""))]
        pub volume: u16,
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SaveQueue", ns(SERVICE_NS))]
    pub struct SaveQueueRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Title", ns(""))]
        pub title: String,
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "SaveQueueResponse", ns(SERVICE_NS))]
    pub struct SaveQueueResponse {
        #[xml(rename = "AssignedObjectID", ns(""))]
        pub assigned_object_id: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Seek", ns(SERVICE_NS))]
    pub struct SeekRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Unit", ns(""))]
        pub unit: String,
        #[xml(rename = "Target", ns(""))]
        pub target: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAVTransportURI", ns(SERVICE_NS))]
    pub struct SetAvTransportUriRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CurrentURI", ns(""))]
        pub current_uri: String,
        #[xml(rename = "CurrentURIMetaData", ns(""))]
        pub current_uri_meta_data: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetCrossfadeMode", ns(SERVICE_NS))]
    pub struct SetCrossfadeModeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CrossfadeMode", ns(""))]
        pub crossfade_mode: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetNextAVTransportURI", ns(SERVICE_NS))]
    pub struct SetNextAvTransportUriRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "NextURI", ns(""))]
        pub next_uri: String,
        #[xml(rename = "NextURIMetaData", ns(""))]
        pub next_uri_meta_data: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetPlayMode", ns(SERVICE_NS))]
    pub struct SetPlayModeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "NewPlayMode", ns(""))]
        pub new_play_mode: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SnoozeAlarm", ns(SERVICE_NS))]
    pub struct SnoozeAlarmRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Duration", ns(""))]
        pub duration: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "StartAutoplay", ns(SERVICE_NS))]
    pub struct StartAutoplayRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "ProgramURI", ns(""))]
        pub program_uri: String,
        #[xml(rename = "ProgramMetaData", ns(""))]
        pub program_meta_data: String,
        #[xml(rename = "Volume", ns(""))]
        pub volume: u16,
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: bool,
        #[xml(rename = "ResetVolumeAfter", ns(""))]
        pub reset_volume_after: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Stop", ns(SERVICE_NS))]
    pub struct StopRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
}
pub mod alarm_clock {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "AlarmClock", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:AlarmClock:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CreateAlarm", ns(SERVICE_NS))]
    pub struct CreateAlarmRequest {
        #[xml(rename = "StartLocalTime", ns(""))]
        pub start_local_time: String,
        #[xml(rename = "Duration", ns(""))]
        pub duration: String,
        #[xml(rename = "Recurrence", ns(""))]
        pub recurrence: String,
        #[xml(rename = "Enabled", ns(""))]
        pub enabled: bool,
        #[xml(rename = "RoomUUID", ns(""))]
        pub room_uuid: String,
        #[xml(rename = "ProgramURI", ns(""))]
        pub program_uri: String,
        #[xml(rename = "ProgramMetaData", ns(""))]
        pub program_meta_data: String,
        #[xml(rename = "PlayMode", ns(""))]
        pub play_mode: String,
        #[xml(rename = "Volume", ns(""))]
        pub volume: u16,
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "CreateAlarmResponse", ns(SERVICE_NS))]
    pub struct CreateAlarmResponse {
        #[xml(rename = "AssignedID", ns(""))]
        pub assigned_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "DestroyAlarm", ns(SERVICE_NS))]
    pub struct DestroyAlarmRequest {
        #[xml(rename = "ID", ns(""))]
        pub id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetDailyIndexRefreshTimeResponse", ns(SERVICE_NS))]
    pub struct GetDailyIndexRefreshTimeResponse {
        #[xml(rename = "CurrentDailyIndexRefreshTime", ns(""))]
        pub current_daily_index_refresh_time: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetFormatResponse", ns(SERVICE_NS))]
    pub struct GetFormatResponse {
        #[xml(rename = "CurrentTimeFormat", ns(""))]
        pub current_time_format: Option<String>,
        #[xml(rename = "CurrentDateFormat", ns(""))]
        pub current_date_format: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetHouseholdTimeAtStamp", ns(SERVICE_NS))]
    pub struct GetHouseholdTimeAtStampRequest {
        #[xml(rename = "TimeStamp", ns(""))]
        pub time_stamp: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetHouseholdTimeAtStampResponse", ns(SERVICE_NS))]
    pub struct GetHouseholdTimeAtStampResponse {
        #[xml(rename = "HouseholdUTCTime", ns(""))]
        pub household_utc_time: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTimeNowResponse", ns(SERVICE_NS))]
    pub struct GetTimeNowResponse {
        #[xml(rename = "CurrentUTCTime", ns(""))]
        pub current_utc_time: Option<String>,
        #[xml(rename = "CurrentLocalTime", ns(""))]
        pub current_local_time: Option<String>,
        #[xml(rename = "CurrentTimeZone", ns(""))]
        pub current_time_zone: Option<String>,
        #[xml(rename = "CurrentTimeGeneration", ns(""))]
        pub current_time_generation: Option<u32>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTimeServerResponse", ns(SERVICE_NS))]
    pub struct GetTimeServerResponse {
        #[xml(rename = "CurrentTimeServer", ns(""))]
        pub current_time_server: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTimeZoneResponse", ns(SERVICE_NS))]
    pub struct GetTimeZoneResponse {
        #[xml(rename = "Index", ns(""))]
        pub index: Option<i32>,
        #[xml(rename = "AutoAdjustDst", ns(""))]
        pub auto_adjust_dst: Option<bool>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTimeZoneAndRuleResponse", ns(SERVICE_NS))]
    pub struct GetTimeZoneAndRuleResponse {
        #[xml(rename = "Index", ns(""))]
        pub index: Option<i32>,
        #[xml(rename = "AutoAdjustDst", ns(""))]
        pub auto_adjust_dst: Option<bool>,
        #[xml(rename = "CurrentTimeZone", ns(""))]
        pub current_time_zone: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetTimeZoneRule", ns(SERVICE_NS))]
    pub struct GetTimeZoneRuleRequest {
        #[xml(rename = "Index", ns(""))]
        pub index: i32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTimeZoneRuleResponse", ns(SERVICE_NS))]
    pub struct GetTimeZoneRuleResponse {
        #[xml(rename = "TimeZone", ns(""))]
        pub time_zone: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ListAlarmsResponse", ns(SERVICE_NS))]
    pub struct ListAlarmsResponse {
        #[xml(rename = "CurrentAlarmList", ns(""))]
        pub current_alarm_list: Option<String>,
        #[xml(rename = "CurrentAlarmListVersion", ns(""))]
        pub current_alarm_list_version: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetDailyIndexRefreshTime", ns(SERVICE_NS))]
    pub struct SetDailyIndexRefreshTimeRequest {
        #[xml(rename = "DesiredDailyIndexRefreshTime", ns(""))]
        pub desired_daily_index_refresh_time: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetFormat", ns(SERVICE_NS))]
    pub struct SetFormatRequest {
        #[xml(rename = "DesiredTimeFormat", ns(""))]
        pub desired_time_format: String,
        #[xml(rename = "DesiredDateFormat", ns(""))]
        pub desired_date_format: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetTimeNow", ns(SERVICE_NS))]
    pub struct SetTimeNowRequest {
        #[xml(rename = "DesiredTime", ns(""))]
        pub desired_time: String,
        #[xml(rename = "TimeZoneForDesiredTime", ns(""))]
        pub time_zone_for_desired_time: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetTimeServer", ns(SERVICE_NS))]
    pub struct SetTimeServerRequest {
        #[xml(rename = "DesiredTimeServer", ns(""))]
        pub desired_time_server: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetTimeZone", ns(SERVICE_NS))]
    pub struct SetTimeZoneRequest {
        #[xml(rename = "Index", ns(""))]
        pub index: i32,
        #[xml(rename = "AutoAdjustDst", ns(""))]
        pub auto_adjust_dst: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "UpdateAlarm", ns(SERVICE_NS))]
    pub struct UpdateAlarmRequest {
        #[xml(rename = "ID", ns(""))]
        pub id: u32,
        #[xml(rename = "StartLocalTime", ns(""))]
        pub start_local_time: String,
        #[xml(rename = "Duration", ns(""))]
        pub duration: String,
        #[xml(rename = "Recurrence", ns(""))]
        pub recurrence: String,
        #[xml(rename = "Enabled", ns(""))]
        pub enabled: bool,
        #[xml(rename = "RoomUUID", ns(""))]
        pub room_uuid: String,
        #[xml(rename = "ProgramURI", ns(""))]
        pub program_uri: String,
        #[xml(rename = "ProgramMetaData", ns(""))]
        pub program_meta_data: String,
        #[xml(rename = "PlayMode", ns(""))]
        pub play_mode: String,
        #[xml(rename = "Volume", ns(""))]
        pub volume: u16,
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: bool,
    }
}
pub mod audio_in {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "AudioIn", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:AudioIn:1";
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAudioInputAttributesResponse", ns(SERVICE_NS))]
    pub struct GetAudioInputAttributesResponse {
        #[xml(rename = "CurrentName", ns(""))]
        pub current_name: Option<String>,
        #[xml(rename = "CurrentIcon", ns(""))]
        pub current_icon: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetLineInLevelResponse", ns(SERVICE_NS))]
    pub struct GetLineInLevelResponse {
        #[xml(rename = "CurrentLeftLineInLevel", ns(""))]
        pub current_left_line_in_level: Option<i32>,
        #[xml(rename = "CurrentRightLineInLevel", ns(""))]
        pub current_right_line_in_level: Option<i32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SelectAudio", ns(SERVICE_NS))]
    pub struct SelectAudioRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAudioInputAttributes", ns(SERVICE_NS))]
    pub struct SetAudioInputAttributesRequest {
        #[xml(rename = "DesiredName", ns(""))]
        pub desired_name: String,
        #[xml(rename = "DesiredIcon", ns(""))]
        pub desired_icon: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetLineInLevel", ns(SERVICE_NS))]
    pub struct SetLineInLevelRequest {
        #[xml(rename = "DesiredLeftLineInLevel", ns(""))]
        pub desired_left_line_in_level: i32,
        #[xml(rename = "DesiredRightLineInLevel", ns(""))]
        pub desired_right_line_in_level: i32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "StartTransmissionToGroup", ns(SERVICE_NS))]
    pub struct StartTransmissionToGroupRequest {
        #[xml(rename = "CoordinatorID", ns(""))]
        pub coordinator_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "StartTransmissionToGroupResponse", ns(SERVICE_NS))]
    pub struct StartTransmissionToGroupResponse {
        #[xml(rename = "CurrentTransportSettings", ns(""))]
        pub current_transport_settings: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "StopTransmissionToGroup", ns(SERVICE_NS))]
    pub struct StopTransmissionToGroupRequest {
        #[xml(rename = "CoordinatorID", ns(""))]
        pub coordinator_id: String,
    }
}
pub mod connection_manager {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "ConnectionManager", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:ConnectionManager:1";
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetCurrentConnectionIDsResponse", ns(SERVICE_NS))]
    pub struct GetCurrentConnectionIdsResponse {
        #[xml(rename = "ConnectionIDs", ns(""))]
        pub connection_ids: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetCurrentConnectionInfo", ns(SERVICE_NS))]
    pub struct GetCurrentConnectionInfoRequest {
        #[xml(rename = "ConnectionID", ns(""))]
        pub connection_id: i32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetCurrentConnectionInfoResponse", ns(SERVICE_NS))]
    pub struct GetCurrentConnectionInfoResponse {
        #[xml(rename = "RcsID", ns(""))]
        pub rcs_id: Option<i32>,
        #[xml(rename = "AVTransportID", ns(""))]
        pub av_transport_id: Option<i32>,
        #[xml(rename = "ProtocolInfo", ns(""))]
        pub protocol_info: Option<String>,
        #[xml(rename = "PeerConnectionManager", ns(""))]
        pub peer_connection_manager: Option<String>,
        #[xml(rename = "PeerConnectionID", ns(""))]
        pub peer_connection_id: Option<i32>,
        #[xml(rename = "Direction", ns(""))]
        pub direction: Option<String>,
        #[xml(rename = "Status", ns(""))]
        pub status: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetProtocolInfoResponse", ns(SERVICE_NS))]
    pub struct GetProtocolInfoResponse {
        #[xml(rename = "Source", ns(""))]
        pub source: Option<String>,
        #[xml(rename = "Sink", ns(""))]
        pub sink: Option<String>,
    }
}
pub mod content_directory {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "ContentDirectory", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:ContentDirectory:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Browse", ns(SERVICE_NS))]
    pub struct BrowseRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "BrowseFlag", ns(""))]
        pub browse_flag: String,
        #[xml(rename = "Filter", ns(""))]
        pub filter: String,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "RequestedCount", ns(""))]
        pub requested_count: u32,
        #[xml(rename = "SortCriteria", ns(""))]
        pub sort_criteria: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "BrowseResponse", ns(SERVICE_NS))]
    pub struct BrowseResponse {
        #[xml(rename = "Result", ns(""))]
        pub result: Option<String>,
        #[xml(rename = "NumberReturned", ns(""))]
        pub number_returned: Option<u32>,
        #[xml(rename = "TotalMatches", ns(""))]
        pub total_matches: Option<u32>,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CreateObject", ns(SERVICE_NS))]
    pub struct CreateObjectRequest {
        #[xml(rename = "ContainerID", ns(""))]
        pub container_id: String,
        #[xml(rename = "Elements", ns(""))]
        pub elements: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "CreateObjectResponse", ns(SERVICE_NS))]
    pub struct CreateObjectResponse {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: Option<String>,
        #[xml(rename = "Result", ns(""))]
        pub result: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "DestroyObject", ns(SERVICE_NS))]
    pub struct DestroyObjectRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "FindPrefix", ns(SERVICE_NS))]
    pub struct FindPrefixRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "Prefix", ns(""))]
        pub prefix: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "FindPrefixResponse", ns(SERVICE_NS))]
    pub struct FindPrefixResponse {
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: Option<u32>,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: Option<u32>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAlbumArtistDisplayOptionResponse", ns(SERVICE_NS))]
    pub struct GetAlbumArtistDisplayOptionResponse {
        #[xml(rename = "AlbumArtistDisplayOption", ns(""))]
        pub album_artist_display_option: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetAllPrefixLocations", ns(SERVICE_NS))]
    pub struct GetAllPrefixLocationsRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAllPrefixLocationsResponse", ns(SERVICE_NS))]
    pub struct GetAllPrefixLocationsResponse {
        #[xml(rename = "TotalPrefixes", ns(""))]
        pub total_prefixes: Option<u32>,
        #[xml(rename = "PrefixAndIndexCSV", ns(""))]
        pub prefix_and_index_csv: Option<String>,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: Option<u32>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetBrowseableResponse", ns(SERVICE_NS))]
    pub struct GetBrowseableResponse {
        #[xml(rename = "IsBrowseable", ns(""))]
        pub is_browseable: Option<bool>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetLastIndexChangeResponse", ns(SERVICE_NS))]
    pub struct GetLastIndexChangeResponse {
        #[xml(rename = "LastIndexChange", ns(""))]
        pub last_index_change: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetSearchCapabilitiesResponse", ns(SERVICE_NS))]
    pub struct GetSearchCapabilitiesResponse {
        #[xml(rename = "SearchCaps", ns(""))]
        pub search_caps: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetShareIndexInProgressResponse", ns(SERVICE_NS))]
    pub struct GetShareIndexInProgressResponse {
        #[xml(rename = "IsIndexing", ns(""))]
        pub is_indexing: Option<bool>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetSortCapabilitiesResponse", ns(SERVICE_NS))]
    pub struct GetSortCapabilitiesResponse {
        #[xml(rename = "SortCaps", ns(""))]
        pub sort_caps: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetSystemUpdateIDResponse", ns(SERVICE_NS))]
    pub struct GetSystemUpdateIdResponse {
        #[xml(rename = "Id", ns(""))]
        pub id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RefreshShareIndex", ns(SERVICE_NS))]
    pub struct RefreshShareIndexRequest {
        #[xml(rename = "AlbumArtistDisplayOption", ns(""))]
        pub album_artist_display_option: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RequestResort", ns(SERVICE_NS))]
    pub struct RequestResortRequest {
        #[xml(rename = "SortOrder", ns(""))]
        pub sort_order: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetBrowseable", ns(SERVICE_NS))]
    pub struct SetBrowseableRequest {
        #[xml(rename = "Browseable", ns(""))]
        pub browseable: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "UpdateObject", ns(SERVICE_NS))]
    pub struct UpdateObjectRequest {
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
        #[xml(rename = "CurrentTagValue", ns(""))]
        pub current_tag_value: String,
        #[xml(rename = "NewTagValue", ns(""))]
        pub new_tag_value: String,
    }
}
pub mod device_properties {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "DeviceProperties", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:DeviceProperties:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddBondedZones", ns(SERVICE_NS))]
    pub struct AddBondedZonesRequest {
        #[xml(rename = "ChannelMapSet", ns(""))]
        pub channel_map_set: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddHTSatellite", ns(SERVICE_NS))]
    pub struct AddHtSatelliteRequest {
        #[xml(rename = "HTSatChanMapSet", ns(""))]
        pub ht_sat_chan_map_set: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CreateStereoPair", ns(SERVICE_NS))]
    pub struct CreateStereoPairRequest {
        #[xml(rename = "ChannelMapSet", ns(""))]
        pub channel_map_set: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "EnterConfigMode", ns(SERVICE_NS))]
    pub struct EnterConfigModeRequest {
        #[xml(rename = "Mode", ns(""))]
        pub mode: String,
        #[xml(rename = "Options", ns(""))]
        pub options: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "EnterConfigModeResponse", ns(SERVICE_NS))]
    pub struct EnterConfigModeResponse {
        #[xml(rename = "State", ns(""))]
        pub state: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ExitConfigMode", ns(SERVICE_NS))]
    pub struct ExitConfigModeRequest {
        #[xml(rename = "Options", ns(""))]
        pub options: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetAutoplayLinkedZones", ns(SERVICE_NS))]
    pub struct GetAutoplayLinkedZonesRequest {
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAutoplayLinkedZonesResponse", ns(SERVICE_NS))]
    pub struct GetAutoplayLinkedZonesResponse {
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetAutoplayRoomUUID", ns(SERVICE_NS))]
    pub struct GetAutoplayRoomUuidRequest {
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAutoplayRoomUUIDResponse", ns(SERVICE_NS))]
    pub struct GetAutoplayRoomUuidResponse {
        #[xml(rename = "RoomUUID", ns(""))]
        pub room_uuid: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetAutoplayVolume", ns(SERVICE_NS))]
    pub struct GetAutoplayVolumeRequest {
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetAutoplayVolumeResponse", ns(SERVICE_NS))]
    pub struct GetAutoplayVolumeResponse {
        #[xml(rename = "CurrentVolume", ns(""))]
        pub current_volume: Option<u16>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetButtonLockStateResponse", ns(SERVICE_NS))]
    pub struct GetButtonLockStateResponse {
        #[xml(rename = "CurrentButtonLockState", ns(""))]
        pub current_button_lock_state: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetButtonStateResponse", ns(SERVICE_NS))]
    pub struct GetButtonStateResponse {
        #[xml(rename = "State", ns(""))]
        pub state: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetHTForwardStateResponse", ns(SERVICE_NS))]
    pub struct GetHtForwardStateResponse {
        #[xml(rename = "IsHTForwardEnabled", ns(""))]
        pub is_ht_forward_enabled: Option<bool>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetHouseholdIDResponse", ns(SERVICE_NS))]
    pub struct GetHouseholdIdResponse {
        #[xml(rename = "CurrentHouseholdID", ns(""))]
        pub current_household_id: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetLEDStateResponse", ns(SERVICE_NS))]
    pub struct GetLedStateResponse {
        #[xml(rename = "CurrentLEDState", ns(""))]
        pub current_led_state: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetUseAutoplayVolume", ns(SERVICE_NS))]
    pub struct GetUseAutoplayVolumeRequest {
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetUseAutoplayVolumeResponse", ns(SERVICE_NS))]
    pub struct GetUseAutoplayVolumeResponse {
        #[xml(rename = "UseVolume", ns(""))]
        pub use_volume: Option<bool>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetZoneAttributesResponse", ns(SERVICE_NS))]
    pub struct GetZoneAttributesResponse {
        #[xml(rename = "CurrentZoneName", ns(""))]
        pub current_zone_name: Option<String>,
        #[xml(rename = "CurrentIcon", ns(""))]
        pub current_icon: Option<String>,
        #[xml(rename = "CurrentConfiguration", ns(""))]
        pub current_configuration: Option<String>,
        #[xml(rename = "CurrentTargetRoomName", ns(""))]
        pub current_target_room_name: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetZoneInfoResponse", ns(SERVICE_NS))]
    pub struct GetZoneInfoResponse {
        #[xml(rename = "SerialNumber", ns(""))]
        pub serial_number: Option<String>,
        #[xml(rename = "SoftwareVersion", ns(""))]
        pub software_version: Option<String>,
        #[xml(rename = "DisplaySoftwareVersion", ns(""))]
        pub display_software_version: Option<String>,
        #[xml(rename = "HardwareVersion", ns(""))]
        pub hardware_version: Option<String>,
        #[xml(rename = "IPAddress", ns(""))]
        pub ip_address: Option<String>,
        #[xml(rename = "MACAddress", ns(""))]
        pub mac_address: Option<String>,
        #[xml(rename = "CopyrightInfo", ns(""))]
        pub copyright_info: Option<String>,
        #[xml(rename = "ExtraInfo", ns(""))]
        pub extra_info: Option<String>,
        #[xml(rename = "HTAudioIn", ns(""))]
        pub ht_audio_in: Option<u32>,
        #[xml(rename = "Flags", ns(""))]
        pub flags: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveBondedZones", ns(SERVICE_NS))]
    pub struct RemoveBondedZonesRequest {
        #[xml(rename = "ChannelMapSet", ns(""))]
        pub channel_map_set: String,
        #[xml(rename = "KeepGrouped", ns(""))]
        pub keep_grouped: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveHTSatellite", ns(SERVICE_NS))]
    pub struct RemoveHtSatelliteRequest {
        #[xml(rename = "SatRoomUUID", ns(""))]
        pub sat_room_uuid: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RoomDetectionStartChirping", ns(SERVICE_NS))]
    pub struct RoomDetectionStartChirpingRequest {
        #[xml(rename = "Channel", ns(""))]
        pub channel: u16,
        #[xml(rename = "DurationMilliseconds", ns(""))]
        pub duration_milliseconds: u32,
        #[xml(rename = "ChirpIfPlayingSwappableAudio", ns(""))]
        pub chirp_if_playing_swappable_audio: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "RoomDetectionStartChirpingResponse", ns(SERVICE_NS))]
    pub struct RoomDetectionStartChirpingResponse {
        #[xml(rename = "PlayId", ns(""))]
        pub play_id: Option<u32>,
        #[xml(rename = "ChirpIfPlayingSwappableAudio", ns(""))]
        pub chirp_if_playing_swappable_audio: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RoomDetectionStopChirping", ns(SERVICE_NS))]
    pub struct RoomDetectionStopChirpingRequest {
        #[xml(rename = "PlayId", ns(""))]
        pub play_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SeparateStereoPair", ns(SERVICE_NS))]
    pub struct SeparateStereoPairRequest {
        #[xml(rename = "ChannelMapSet", ns(""))]
        pub channel_map_set: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAutoplayLinkedZones", ns(SERVICE_NS))]
    pub struct SetAutoplayLinkedZonesRequest {
        #[xml(rename = "IncludeLinkedZones", ns(""))]
        pub include_linked_zones: bool,
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAutoplayRoomUUID", ns(SERVICE_NS))]
    pub struct SetAutoplayRoomUuidRequest {
        #[xml(rename = "RoomUUID", ns(""))]
        pub room_uuid: String,
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAutoplayVolume", ns(SERVICE_NS))]
    pub struct SetAutoplayVolumeRequest {
        #[xml(rename = "Volume", ns(""))]
        pub volume: u16,
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetButtonLockState", ns(SERVICE_NS))]
    pub struct SetButtonLockStateRequest {
        #[xml(rename = "DesiredButtonLockState", ns(""))]
        pub desired_button_lock_state: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetLEDState", ns(SERVICE_NS))]
    pub struct SetLedStateRequest {
        #[xml(rename = "DesiredLEDState", ns(""))]
        pub desired_led_state: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetUseAutoplayVolume", ns(SERVICE_NS))]
    pub struct SetUseAutoplayVolumeRequest {
        #[xml(rename = "UseVolume", ns(""))]
        pub use_volume: bool,
        #[xml(rename = "Source", ns(""))]
        pub source: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetZoneAttributes", ns(SERVICE_NS))]
    pub struct SetZoneAttributesRequest {
        #[xml(rename = "DesiredZoneName", ns(""))]
        pub desired_zone_name: String,
        #[xml(rename = "DesiredIcon", ns(""))]
        pub desired_icon: String,
        #[xml(rename = "DesiredConfiguration", ns(""))]
        pub desired_configuration: String,
        #[xml(rename = "DesiredTargetRoomName", ns(""))]
        pub desired_target_room_name: String,
    }
}
pub mod group_management {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "GroupManagement", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:GroupManagement:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddMember", ns(SERVICE_NS))]
    pub struct AddMemberRequest {
        #[xml(rename = "MemberID", ns(""))]
        pub member_id: String,
        #[xml(rename = "BootSeq", ns(""))]
        pub boot_seq: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddMemberResponse", ns(SERVICE_NS))]
    pub struct AddMemberResponse {
        #[xml(rename = "CurrentTransportSettings", ns(""))]
        pub current_transport_settings: Option<String>,
        #[xml(rename = "CurrentURI", ns(""))]
        pub current_uri: Option<String>,
        #[xml(rename = "GroupUUIDJoined", ns(""))]
        pub group_uuid_joined: Option<String>,
        #[xml(rename = "ResetVolumeAfter", ns(""))]
        pub reset_volume_after: Option<bool>,
        #[xml(rename = "VolumeAVTransportURI", ns(""))]
        pub volume_av_transport_uri: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveMember", ns(SERVICE_NS))]
    pub struct RemoveMemberRequest {
        #[xml(rename = "MemberID", ns(""))]
        pub member_id: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReportTrackBufferingResult", ns(SERVICE_NS))]
    pub struct ReportTrackBufferingResultRequest {
        #[xml(rename = "MemberID", ns(""))]
        pub member_id: String,
        #[xml(rename = "ResultCode", ns(""))]
        pub result_code: i32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetSourceAreaIds", ns(SERVICE_NS))]
    pub struct SetSourceAreaIdsRequest {
        #[xml(rename = "DesiredSourceAreaIds", ns(""))]
        pub desired_source_area_ids: String,
    }
}
pub mod group_rendering_control {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "GroupRenderingControl", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:GroupRenderingControl:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetGroupMute", ns(SERVICE_NS))]
    pub struct GetGroupMuteRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetGroupMuteResponse", ns(SERVICE_NS))]
    pub struct GetGroupMuteResponse {
        #[xml(rename = "CurrentMute", ns(""))]
        pub current_mute: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetGroupVolume", ns(SERVICE_NS))]
    pub struct GetGroupVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetGroupVolumeResponse", ns(SERVICE_NS))]
    pub struct GetGroupVolumeResponse {
        #[xml(rename = "CurrentVolume", ns(""))]
        pub current_volume: Option<u16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetGroupMute", ns(SERVICE_NS))]
    pub struct SetGroupMuteRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredMute", ns(""))]
        pub desired_mute: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetGroupVolume", ns(SERVICE_NS))]
    pub struct SetGroupVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredVolume", ns(""))]
        pub desired_volume: u16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetRelativeGroupVolume", ns(SERVICE_NS))]
    pub struct SetRelativeGroupVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Adjustment", ns(""))]
        pub adjustment: i32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "SetRelativeGroupVolumeResponse", ns(SERVICE_NS))]
    pub struct SetRelativeGroupVolumeResponse {
        #[xml(rename = "NewVolume", ns(""))]
        pub new_volume: Option<u16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SnapshotGroupVolume", ns(SERVICE_NS))]
    pub struct SnapshotGroupVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
}
pub mod ht_control {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "HTControl", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:HTControl:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CommitLearnedIRCodes", ns(SERVICE_NS))]
    pub struct CommitLearnedIrCodesRequest {
        #[xml(rename = "Name", ns(""))]
        pub name: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetIRRepeaterStateResponse", ns(SERVICE_NS))]
    pub struct GetIrRepeaterStateResponse {
        #[xml(rename = "CurrentIRRepeaterState", ns(""))]
        pub current_ir_repeater_state: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetLEDFeedbackStateResponse", ns(SERVICE_NS))]
    pub struct GetLedFeedbackStateResponse {
        #[xml(rename = "LEDFeedbackState", ns(""))]
        pub led_feedback_state: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "IdentifyIRRemote", ns(SERVICE_NS))]
    pub struct IdentifyIrRemoteRequest {
        #[xml(rename = "Timeout", ns(""))]
        pub timeout: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "IsRemoteConfiguredResponse", ns(SERVICE_NS))]
    pub struct IsRemoteConfiguredResponse {
        #[xml(rename = "RemoteConfigured", ns(""))]
        pub remote_configured: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "LearnIRCode", ns(SERVICE_NS))]
    pub struct LearnIrCodeRequest {
        #[xml(rename = "IRCode", ns(""))]
        pub ir_code: String,
        #[xml(rename = "Timeout", ns(""))]
        pub timeout: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetIRRepeaterState", ns(SERVICE_NS))]
    pub struct SetIrRepeaterStateRequest {
        #[xml(rename = "DesiredIRRepeaterState", ns(""))]
        pub desired_ir_repeater_state: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetLEDFeedbackState", ns(SERVICE_NS))]
    pub struct SetLedFeedbackStateRequest {
        #[xml(rename = "LEDFeedbackState", ns(""))]
        pub led_feedback_state: String,
    }
}
pub mod music_services {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "MusicServices", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:MusicServices:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetSessionId", ns(SERVICE_NS))]
    pub struct GetSessionIdRequest {
        #[xml(rename = "ServiceId", ns(""))]
        pub service_id: u32,
        #[xml(rename = "Username", ns(""))]
        pub username: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetSessionIdResponse", ns(SERVICE_NS))]
    pub struct GetSessionIdResponse {
        #[xml(rename = "SessionId", ns(""))]
        pub session_id: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ListAvailableServicesResponse", ns(SERVICE_NS))]
    pub struct ListAvailableServicesResponse {
        #[xml(rename = "AvailableServiceDescriptorList", ns(""))]
        pub available_service_descriptor_list: Option<String>,
        #[xml(rename = "AvailableServiceTypeList", ns(""))]
        pub available_service_type_list: Option<String>,
        #[xml(rename = "AvailableServiceListVersion", ns(""))]
        pub available_service_list_version: Option<String>,
    }
}
pub mod q_play {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-tencent-com", "QPlay", 1);
    pub const SERVICE_NS: &str = "urn:schemas-tencent-com:service:QPlay:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "QPlayAuth", ns(SERVICE_NS))]
    pub struct QPlayAuthRequest {
        #[xml(rename = "Seed", ns(""))]
        pub seed: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "QPlayAuthResponse", ns(SERVICE_NS))]
    pub struct QPlayAuthResponse {
        #[xml(rename = "Code", ns(""))]
        pub code: Option<String>,
        #[xml(rename = "MID", ns(""))]
        pub mid: Option<String>,
        #[xml(rename = "DID", ns(""))]
        pub did: Option<String>,
    }
}
pub mod queue {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-sonos-com", "Queue", 1);
    pub const SERVICE_NS: &str = "urn:schemas-sonos-com:service:Queue:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddMultipleURIs", ns(SERVICE_NS))]
    pub struct AddMultipleUrisRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "ContainerURI", ns(""))]
        pub container_uri: String,
        #[xml(rename = "ContainerMetaData", ns(""))]
        pub container_meta_data: String,
        #[xml(rename = "DesiredFirstTrackNumberEnqueued", ns(""))]
        pub desired_first_track_number_enqueued: u32,
        #[xml(rename = "EnqueueAsNext", ns(""))]
        pub enqueue_as_next: bool,
        #[xml(rename = "NumberOfURIs", ns(""))]
        pub number_of_uris: u32,
        #[xml(rename = "EnqueuedURIsAndMetaData", ns(""))]
        pub enqueued_uris_and_meta_data: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddMultipleURIsResponse", ns(SERVICE_NS))]
    pub struct AddMultipleUrisResponse {
        #[xml(rename = "FirstTrackNumberEnqueued", ns(""))]
        pub first_track_number_enqueued: Option<u32>,
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddURI", ns(SERVICE_NS))]
    pub struct AddUriRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "EnqueuedURI", ns(""))]
        pub enqueued_uri: String,
        #[xml(rename = "EnqueuedURIMetaData", ns(""))]
        pub enqueued_uri_meta_data: String,
        #[xml(rename = "DesiredFirstTrackNumberEnqueued", ns(""))]
        pub desired_first_track_number_enqueued: u32,
        #[xml(rename = "EnqueueAsNext", ns(""))]
        pub enqueue_as_next: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddURIResponse", ns(SERVICE_NS))]
    pub struct AddUriResponse {
        #[xml(rename = "FirstTrackNumberEnqueued", ns(""))]
        pub first_track_number_enqueued: Option<u32>,
        #[xml(rename = "NumTracksAdded", ns(""))]
        pub num_tracks_added: Option<u32>,
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AttachQueue", ns(SERVICE_NS))]
    pub struct AttachQueueRequest {
        #[xml(rename = "QueueOwnerID", ns(""))]
        pub queue_owner_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AttachQueueResponse", ns(SERVICE_NS))]
    pub struct AttachQueueResponse {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: Option<u32>,
        #[xml(rename = "QueueOwnerContext", ns(""))]
        pub queue_owner_context: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Browse", ns(SERVICE_NS))]
    pub struct BrowseRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "RequestedCount", ns(""))]
        pub requested_count: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "BrowseResponse", ns(SERVICE_NS))]
    pub struct BrowseResponse {
        #[xml(rename = "Result", ns(""))]
        pub result: Option<String>,
        #[xml(rename = "NumberReturned", ns(""))]
        pub number_returned: Option<u32>,
        #[xml(rename = "TotalMatches", ns(""))]
        pub total_matches: Option<u32>,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CreateQueue", ns(SERVICE_NS))]
    pub struct CreateQueueRequest {
        #[xml(rename = "QueueOwnerID", ns(""))]
        pub queue_owner_id: String,
        #[xml(rename = "QueueOwnerContext", ns(""))]
        pub queue_owner_context: String,
        #[xml(rename = "QueuePolicy", ns(""))]
        pub queue_policy: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "CreateQueueResponse", ns(SERVICE_NS))]
    pub struct CreateQueueResponse {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveAllTracks", ns(SERVICE_NS))]
    pub struct RemoveAllTracksRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "RemoveAllTracksResponse", ns(SERVICE_NS))]
    pub struct RemoveAllTracksResponse {
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveTrackRange", ns(SERVICE_NS))]
    pub struct RemoveTrackRangeRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "NumberOfTracks", ns(""))]
        pub number_of_tracks: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "RemoveTrackRangeResponse", ns(SERVICE_NS))]
    pub struct RemoveTrackRangeResponse {
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReorderTracks", ns(SERVICE_NS))]
    pub struct ReorderTracksRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "StartingIndex", ns(""))]
        pub starting_index: u32,
        #[xml(rename = "NumberOfTracks", ns(""))]
        pub number_of_tracks: u32,
        #[xml(rename = "InsertBefore", ns(""))]
        pub insert_before: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ReorderTracksResponse", ns(SERVICE_NS))]
    pub struct ReorderTracksResponse {
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReplaceAllTracks", ns(SERVICE_NS))]
    pub struct ReplaceAllTracksRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "UpdateID", ns(""))]
        pub update_id: u32,
        #[xml(rename = "ContainerURI", ns(""))]
        pub container_uri: String,
        #[xml(rename = "ContainerMetaData", ns(""))]
        pub container_meta_data: String,
        #[xml(rename = "CurrentTrackIndex", ns(""))]
        pub current_track_index: u32,
        #[xml(rename = "NewCurrentTrackIndices", ns(""))]
        pub new_current_track_indices: String,
        #[xml(rename = "NumberOfURIs", ns(""))]
        pub number_of_uris: u32,
        #[xml(rename = "EnqueuedURIsAndMetaData", ns(""))]
        pub enqueued_uris_and_meta_data: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ReplaceAllTracksResponse", ns(SERVICE_NS))]
    pub struct ReplaceAllTracksResponse {
        #[xml(rename = "NewQueueLength", ns(""))]
        pub new_queue_length: Option<u32>,
        #[xml(rename = "NewUpdateID", ns(""))]
        pub new_update_id: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SaveAsSonosPlaylist", ns(SERVICE_NS))]
    pub struct SaveAsSonosPlaylistRequest {
        #[xml(rename = "QueueID", ns(""))]
        pub queue_id: u32,
        #[xml(rename = "Title", ns(""))]
        pub title: String,
        #[xml(rename = "ObjectID", ns(""))]
        pub object_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "SaveAsSonosPlaylistResponse", ns(SERVICE_NS))]
    pub struct SaveAsSonosPlaylistResponse {
        #[xml(rename = "AssignedObjectID", ns(""))]
        pub assigned_object_id: Option<String>,
    }
}
pub mod rendering_control {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "RenderingControl", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:RenderingControl:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetBass", ns(SERVICE_NS))]
    pub struct GetBassRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetBassResponse", ns(SERVICE_NS))]
    pub struct GetBassResponse {
        #[xml(rename = "CurrentBass", ns(""))]
        pub current_bass: Option<i16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetEQ", ns(SERVICE_NS))]
    pub struct GetEqRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "EQType", ns(""))]
        pub eq_type: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetEQResponse", ns(SERVICE_NS))]
    pub struct GetEqResponse {
        #[xml(rename = "CurrentValue", ns(""))]
        pub current_value: Option<i16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetHeadphoneConnected", ns(SERVICE_NS))]
    pub struct GetHeadphoneConnectedRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetHeadphoneConnectedResponse", ns(SERVICE_NS))]
    pub struct GetHeadphoneConnectedResponse {
        #[xml(rename = "CurrentHeadphoneConnected", ns(""))]
        pub current_headphone_connected: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetLoudness", ns(SERVICE_NS))]
    pub struct GetLoudnessRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetLoudnessResponse", ns(SERVICE_NS))]
    pub struct GetLoudnessResponse {
        #[xml(rename = "CurrentLoudness", ns(""))]
        pub current_loudness: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetMute", ns(SERVICE_NS))]
    pub struct GetMuteRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetMuteResponse", ns(SERVICE_NS))]
    pub struct GetMuteResponse {
        #[xml(rename = "CurrentMute", ns(""))]
        pub current_mute: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetOutputFixed", ns(SERVICE_NS))]
    pub struct GetOutputFixedRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetOutputFixedResponse", ns(SERVICE_NS))]
    pub struct GetOutputFixedResponse {
        #[xml(rename = "CurrentFixed", ns(""))]
        pub current_fixed: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetRoomCalibrationStatus", ns(SERVICE_NS))]
    pub struct GetRoomCalibrationStatusRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetRoomCalibrationStatusResponse", ns(SERVICE_NS))]
    pub struct GetRoomCalibrationStatusResponse {
        #[xml(rename = "RoomCalibrationEnabled", ns(""))]
        pub room_calibration_enabled: Option<bool>,
        #[xml(rename = "RoomCalibrationAvailable", ns(""))]
        pub room_calibration_available: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetSupportsOutputFixed", ns(SERVICE_NS))]
    pub struct GetSupportsOutputFixedRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetSupportsOutputFixedResponse", ns(SERVICE_NS))]
    pub struct GetSupportsOutputFixedResponse {
        #[xml(rename = "CurrentSupportsFixed", ns(""))]
        pub current_supports_fixed: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetTreble", ns(SERVICE_NS))]
    pub struct GetTrebleRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetTrebleResponse", ns(SERVICE_NS))]
    pub struct GetTrebleResponse {
        #[xml(rename = "CurrentTreble", ns(""))]
        pub current_treble: Option<i16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetVolume", ns(SERVICE_NS))]
    pub struct GetVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetVolumeResponse", ns(SERVICE_NS))]
    pub struct GetVolumeResponse {
        #[xml(rename = "CurrentVolume", ns(""))]
        pub current_volume: Option<u16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetVolumeDB", ns(SERVICE_NS))]
    pub struct GetVolumeDbRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetVolumeDBResponse", ns(SERVICE_NS))]
    pub struct GetVolumeDbResponse {
        #[xml(rename = "CurrentVolume", ns(""))]
        pub current_volume: Option<i16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetVolumeDBRange", ns(SERVICE_NS))]
    pub struct GetVolumeDbRangeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetVolumeDBRangeResponse", ns(SERVICE_NS))]
    pub struct GetVolumeDbRangeResponse {
        #[xml(rename = "MinValue", ns(""))]
        pub min_value: Option<i16>,
        #[xml(rename = "MaxValue", ns(""))]
        pub max_value: Option<i16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RampToVolume", ns(SERVICE_NS))]
    pub struct RampToVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "RampType", ns(""))]
        pub ramp_type: String,
        #[xml(rename = "DesiredVolume", ns(""))]
        pub desired_volume: u16,
        #[xml(rename = "ResetVolumeAfter", ns(""))]
        pub reset_volume_after: bool,
        #[xml(rename = "ProgramURI", ns(""))]
        pub program_uri: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "RampToVolumeResponse", ns(SERVICE_NS))]
    pub struct RampToVolumeResponse {
        #[xml(rename = "RampTime", ns(""))]
        pub ramp_time: Option<u32>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ResetBasicEQ", ns(SERVICE_NS))]
    pub struct ResetBasicEqRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ResetBasicEQResponse", ns(SERVICE_NS))]
    pub struct ResetBasicEqResponse {
        #[xml(rename = "Bass", ns(""))]
        pub bass: Option<i16>,
        #[xml(rename = "Treble", ns(""))]
        pub treble: Option<i16>,
        #[xml(rename = "Loudness", ns(""))]
        pub loudness: Option<bool>,
        #[xml(rename = "LeftVolume", ns(""))]
        pub left_volume: Option<u16>,
        #[xml(rename = "RightVolume", ns(""))]
        pub right_volume: Option<u16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ResetExtEQ", ns(SERVICE_NS))]
    pub struct ResetExtEqRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "EQType", ns(""))]
        pub eq_type: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RestoreVolumePriorToRamp", ns(SERVICE_NS))]
    pub struct RestoreVolumePriorToRampRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetBass", ns(SERVICE_NS))]
    pub struct SetBassRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredBass", ns(""))]
        pub desired_bass: i16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetChannelMap", ns(SERVICE_NS))]
    pub struct SetChannelMapRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "ChannelMap", ns(""))]
        pub channel_map: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetEQ", ns(SERVICE_NS))]
    pub struct SetEqRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "EQType", ns(""))]
        pub eq_type: String,
        #[xml(rename = "DesiredValue", ns(""))]
        pub desired_value: i16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetLoudness", ns(SERVICE_NS))]
    pub struct SetLoudnessRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "DesiredLoudness", ns(""))]
        pub desired_loudness: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetMute", ns(SERVICE_NS))]
    pub struct SetMuteRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "DesiredMute", ns(""))]
        pub desired_mute: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetOutputFixed", ns(SERVICE_NS))]
    pub struct SetOutputFixedRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredFixed", ns(""))]
        pub desired_fixed: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetRelativeVolume", ns(SERVICE_NS))]
    pub struct SetRelativeVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "Adjustment", ns(""))]
        pub adjustment: i32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "SetRelativeVolumeResponse", ns(SERVICE_NS))]
    pub struct SetRelativeVolumeResponse {
        #[xml(rename = "NewVolume", ns(""))]
        pub new_volume: Option<u16>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetRoomCalibrationStatus", ns(SERVICE_NS))]
    pub struct SetRoomCalibrationStatusRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "RoomCalibrationEnabled", ns(""))]
        pub room_calibration_enabled: bool,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetRoomCalibrationX", ns(SERVICE_NS))]
    pub struct SetRoomCalibrationXRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CalibrationID", ns(""))]
        pub calibration_id: String,
        #[xml(rename = "Coefficients", ns(""))]
        pub coefficients: String,
        #[xml(rename = "CalibrationMode", ns(""))]
        pub calibration_mode: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetTreble", ns(SERVICE_NS))]
    pub struct SetTrebleRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredTreble", ns(""))]
        pub desired_treble: i16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetVolume", ns(SERVICE_NS))]
    pub struct SetVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "DesiredVolume", ns(""))]
        pub desired_volume: u16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetVolumeDB", ns(SERVICE_NS))]
    pub struct SetVolumeDbRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Channel", ns(""))]
        pub channel: String,
        #[xml(rename = "DesiredVolume", ns(""))]
        pub desired_volume: i16,
    }
}
pub mod system_properties {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "SystemProperties", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:SystemProperties:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddAccountX", ns(SERVICE_NS))]
    pub struct AddAccountXRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountID", ns(""))]
        pub account_id: String,
        #[xml(rename = "AccountPassword", ns(""))]
        pub account_password: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddAccountXResponse", ns(SERVICE_NS))]
    pub struct AddAccountXResponse {
        #[xml(rename = "AccountUDN", ns(""))]
        pub account_udn: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "AddOAuthAccountX", ns(SERVICE_NS))]
    pub struct AddOAuthAccountXRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountToken", ns(""))]
        pub account_token: String,
        #[xml(rename = "AccountKey", ns(""))]
        pub account_key: String,
        #[xml(rename = "OAuthDeviceID", ns(""))]
        pub o_auth_device_id: String,
        #[xml(rename = "AuthorizationCode", ns(""))]
        pub authorization_code: String,
        #[xml(rename = "RedirectURI", ns(""))]
        pub redirect_uri: String,
        #[xml(rename = "UserIdHashCode", ns(""))]
        pub user_id_hash_code: String,
        #[xml(rename = "AccountTier", ns(""))]
        pub account_tier: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "AddOAuthAccountXResponse", ns(SERVICE_NS))]
    pub struct AddOAuthAccountXResponse {
        #[xml(rename = "AccountUDN", ns(""))]
        pub account_udn: Option<String>,
        #[xml(rename = "AccountNickname", ns(""))]
        pub account_nickname: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "EditAccountMd", ns(SERVICE_NS))]
    pub struct EditAccountMdRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountID", ns(""))]
        pub account_id: String,
        #[xml(rename = "NewAccountMd", ns(""))]
        pub new_account_md: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "EditAccountPasswordX", ns(SERVICE_NS))]
    pub struct EditAccountPasswordXRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountID", ns(""))]
        pub account_id: String,
        #[xml(rename = "NewAccountPassword", ns(""))]
        pub new_account_password: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "EnableRDM", ns(SERVICE_NS))]
    pub struct EnableRdmRequest {
        #[xml(rename = "RDMValue", ns(""))]
        pub rdm_value: bool,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetRDMResponse", ns(SERVICE_NS))]
    pub struct GetRdmResponse {
        #[xml(rename = "RDMValue", ns(""))]
        pub rdm_value: Option<bool>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetString", ns(SERVICE_NS))]
    pub struct GetStringRequest {
        #[xml(rename = "VariableName", ns(""))]
        pub variable_name: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetStringResponse", ns(SERVICE_NS))]
    pub struct GetStringResponse {
        #[xml(rename = "StringValue", ns(""))]
        pub string_value: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "GetWebCode", ns(SERVICE_NS))]
    pub struct GetWebCodeRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetWebCodeResponse", ns(SERVICE_NS))]
    pub struct GetWebCodeResponse {
        #[xml(rename = "WebCode", ns(""))]
        pub web_code: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ProvisionCredentialedTrialAccountX", ns(SERVICE_NS))]
    pub struct ProvisionCredentialedTrialAccountXRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountID", ns(""))]
        pub account_id: String,
        #[xml(rename = "AccountPassword", ns(""))]
        pub account_password: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ProvisionCredentialedTrialAccountXResponse", ns(SERVICE_NS))]
    pub struct ProvisionCredentialedTrialAccountXResponse {
        #[xml(rename = "IsExpired", ns(""))]
        pub is_expired: Option<bool>,
        #[xml(rename = "AccountUDN", ns(""))]
        pub account_udn: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RefreshAccountCredentialsX", ns(SERVICE_NS))]
    pub struct RefreshAccountCredentialsXRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountUID", ns(""))]
        pub account_uid: u32,
        #[xml(rename = "AccountToken", ns(""))]
        pub account_token: String,
        #[xml(rename = "AccountKey", ns(""))]
        pub account_key: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Remove", ns(SERVICE_NS))]
    pub struct RemoveRequest {
        #[xml(rename = "VariableName", ns(""))]
        pub variable_name: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RemoveAccount", ns(SERVICE_NS))]
    pub struct RemoveAccountRequest {
        #[xml(rename = "AccountType", ns(""))]
        pub account_type: u32,
        #[xml(rename = "AccountID", ns(""))]
        pub account_id: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReplaceAccountX", ns(SERVICE_NS))]
    pub struct ReplaceAccountXRequest {
        #[xml(rename = "AccountUDN", ns(""))]
        pub account_udn: String,
        #[xml(rename = "NewAccountID", ns(""))]
        pub new_account_id: String,
        #[xml(rename = "NewAccountPassword", ns(""))]
        pub new_account_password: String,
        #[xml(rename = "AccountToken", ns(""))]
        pub account_token: String,
        #[xml(rename = "AccountKey", ns(""))]
        pub account_key: String,
        #[xml(rename = "OAuthDeviceID", ns(""))]
        pub o_auth_device_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "ReplaceAccountXResponse", ns(SERVICE_NS))]
    pub struct ReplaceAccountXResponse {
        #[xml(rename = "NewAccountUDN", ns(""))]
        pub new_account_udn: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetAccountNicknameX", ns(SERVICE_NS))]
    pub struct SetAccountNicknameXRequest {
        #[xml(rename = "AccountUDN", ns(""))]
        pub account_udn: String,
        #[xml(rename = "AccountNickname", ns(""))]
        pub account_nickname: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetString", ns(SERVICE_NS))]
    pub struct SetStringRequest {
        #[xml(rename = "VariableName", ns(""))]
        pub variable_name: String,
        #[xml(rename = "StringValue", ns(""))]
        pub string_value: String,
    }
}
pub mod virtual_line_in {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "VirtualLineIn", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:VirtualLineIn:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Next", ns(SERVICE_NS))]
    pub struct NextRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Pause", ns(SERVICE_NS))]
    pub struct PauseRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Play", ns(SERVICE_NS))]
    pub struct PlayRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "Speed", ns(""))]
        pub speed: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Previous", ns(SERVICE_NS))]
    pub struct PreviousRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SetVolume", ns(SERVICE_NS))]
    pub struct SetVolumeRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "DesiredVolume", ns(""))]
        pub desired_volume: u16,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "StartTransmission", ns(SERVICE_NS))]
    pub struct StartTransmissionRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CoordinatorID", ns(""))]
        pub coordinator_id: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "StartTransmissionResponse", ns(SERVICE_NS))]
    pub struct StartTransmissionResponse {
        #[xml(rename = "CurrentTransportSettings", ns(""))]
        pub current_transport_settings: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "Stop", ns(SERVICE_NS))]
    pub struct StopRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "StopTransmission", ns(SERVICE_NS))]
    pub struct StopTransmissionRequest {
        #[xml(rename = "InstanceID", ns(""))]
        pub instance_id: u32,
        #[xml(rename = "CoordinatorID", ns(""))]
        pub coordinator_id: String,
    }
}
pub mod zone_group_topology {
    use instant_xml::{FromXml, ToXml};
    use ssdp_client::URN;

    pub const SERVICE_TYPE: &URN = &URN::service("schemas-upnp-org", "ZoneGroupTopology", 1);
    pub const SERVICE_NS: &str = "urn:schemas-upnp-org:service:ZoneGroupTopology:1";
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "BeginSoftwareUpdate", ns(SERVICE_NS))]
    pub struct BeginSoftwareUpdateRequest {
        #[xml(rename = "UpdateURL", ns(""))]
        pub update_url: String,
        #[xml(rename = "Flags", ns(""))]
        pub flags: u32,
        #[xml(rename = "ExtraOptions", ns(""))]
        pub extra_options: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "CheckForUpdate", ns(SERVICE_NS))]
    pub struct CheckForUpdateRequest {
        #[xml(rename = "UpdateType", ns(""))]
        pub update_type: String,
        #[xml(rename = "CachedOnly", ns(""))]
        pub cached_only: bool,
        #[xml(rename = "Version", ns(""))]
        pub version: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "CheckForUpdateResponse", ns(SERVICE_NS))]
    pub struct CheckForUpdateResponse {
        #[xml(rename = "UpdateItem", ns(""))]
        pub update_item: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetZoneGroupAttributesResponse", ns(SERVICE_NS))]
    pub struct GetZoneGroupAttributesResponse {
        #[xml(rename = "CurrentZoneGroupName", ns(""))]
        pub current_zone_group_name: Option<String>,
        #[xml(rename = "CurrentZoneGroupID", ns(""))]
        pub current_zone_group_id: Option<String>,
        #[xml(rename = "CurrentZonePlayerUUIDsInGroup", ns(""))]
        pub current_zone_player_uu_ids_in_group: Option<String>,
        #[xml(rename = "CurrentMuseHouseholdId", ns(""))]
        pub current_muse_household_id: Option<String>,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "GetZoneGroupStateResponse", ns(SERVICE_NS))]
    pub struct GetZoneGroupStateResponse {
        #[xml(rename = "ZoneGroupState", ns(""))]
        pub zone_group_state: Option<String>,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "RegisterMobileDevice", ns(SERVICE_NS))]
    pub struct RegisterMobileDeviceRequest {
        #[xml(rename = "MobileDeviceName", ns(""))]
        pub mobile_device_name: String,
        #[xml(rename = "MobileDeviceUDN", ns(""))]
        pub mobile_device_udn: String,
        #[xml(rename = "MobileIPAndPort", ns(""))]
        pub mobile_ip_and_port: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "ReportUnresponsiveDevice", ns(SERVICE_NS))]
    pub struct ReportUnresponsiveDeviceRequest {
        #[xml(rename = "DeviceUUID", ns(""))]
        pub device_uuid: String,
        #[xml(rename = "DesiredAction", ns(""))]
        pub desired_action: String,
    }
    #[derive(ToXml, Debug, Clone, PartialEq, Default)]
    #[xml(rename = "SubmitDiagnostics", ns(SERVICE_NS))]
    pub struct SubmitDiagnosticsRequest {
        #[xml(rename = "IncludeControllers", ns(""))]
        pub include_controllers: bool,
        #[xml(rename = "Type", ns(""))]
        pub type_: String,
    }
    #[derive(FromXml, Debug, Clone, PartialEq)]
    #[xml(rename = "SubmitDiagnosticsResponse", ns(SERVICE_NS))]
    pub struct SubmitDiagnosticsResponse {
        #[xml(rename = "DiagnosticID", ns(""))]
        pub diagnostic_id: Option<u32>,
    }
}

#[allow(async_fn_in_trait)]
pub trait AVTransport {
    async fn add_multiple_uris_to_queue(
        &self,
        request: av_transport::AddMultipleUrisToQueueRequest,
    ) -> Result<av_transport::AddMultipleUrisToQueueResponse>;
    async fn add_uri_to_queue(
        &self,
        request: av_transport::AddUriToQueueRequest,
    ) -> Result<av_transport::AddUriToQueueResponse>;
    async fn add_uri_to_saved_queue(
        &self,
        request: av_transport::AddUriToSavedQueueRequest,
    ) -> Result<av_transport::AddUriToSavedQueueResponse>;
    async fn backup_queue(&self, request: av_transport::BackupQueueRequest) -> Result<()>;
    async fn become_coordinator_of_standalone_group(
        &self,
        request: av_transport::BecomeCoordinatorOfStandaloneGroupRequest,
    ) -> Result<av_transport::BecomeCoordinatorOfStandaloneGroupResponse>;
    async fn become_group_coordinator(
        &self,
        request: av_transport::BecomeGroupCoordinatorRequest,
    ) -> Result<()>;
    async fn become_group_coordinator_and_source(
        &self,
        request: av_transport::BecomeGroupCoordinatorAndSourceRequest,
    ) -> Result<()>;
    async fn change_coordinator(
        &self,
        request: av_transport::ChangeCoordinatorRequest,
    ) -> Result<()>;
    async fn change_transport_settings(
        &self,
        request: av_transport::ChangeTransportSettingsRequest,
    ) -> Result<()>;
    async fn configure_sleep_timer(
        &self,
        request: av_transport::ConfigureSleepTimerRequest,
    ) -> Result<()>;
    async fn create_saved_queue(
        &self,
        request: av_transport::CreateSavedQueueRequest,
    ) -> Result<av_transport::CreateSavedQueueResponse>;
    async fn delegate_group_coordination_to(
        &self,
        request: av_transport::DelegateGroupCoordinationToRequest,
    ) -> Result<()>;
    async fn end_direct_control_session(
        &self,
        request: av_transport::EndDirectControlSessionRequest,
    ) -> Result<()>;
    async fn get_crossfade_mode(
        &self,
        request: av_transport::GetCrossfadeModeRequest,
    ) -> Result<av_transport::GetCrossfadeModeResponse>;
    async fn get_current_transport_actions(
        &self,
        request: av_transport::GetCurrentTransportActionsRequest,
    ) -> Result<av_transport::GetCurrentTransportActionsResponse>;
    async fn get_device_capabilities(
        &self,
        request: av_transport::GetDeviceCapabilitiesRequest,
    ) -> Result<av_transport::GetDeviceCapabilitiesResponse>;
    async fn get_media_info(
        &self,
        request: av_transport::GetMediaInfoRequest,
    ) -> Result<av_transport::GetMediaInfoResponse>;
    async fn get_position_info(
        &self,
        request: av_transport::GetPositionInfoRequest,
    ) -> Result<av_transport::GetPositionInfoResponse>;
    async fn get_remaining_sleep_timer_duration(
        &self,
        request: av_transport::GetRemainingSleepTimerDurationRequest,
    ) -> Result<av_transport::GetRemainingSleepTimerDurationResponse>;
    async fn get_running_alarm_properties(
        &self,
        request: av_transport::GetRunningAlarmPropertiesRequest,
    ) -> Result<av_transport::GetRunningAlarmPropertiesResponse>;
    async fn get_transport_info(
        &self,
        request: av_transport::GetTransportInfoRequest,
    ) -> Result<av_transport::GetTransportInfoResponse>;
    async fn get_transport_settings(
        &self,
        request: av_transport::GetTransportSettingsRequest,
    ) -> Result<av_transport::GetTransportSettingsResponse>;
    async fn next(&self, request: av_transport::NextRequest) -> Result<()>;
    async fn notify_deleted_uri(
        &self,
        request: av_transport::NotifyDeletedUriRequest,
    ) -> Result<()>;
    async fn pause(&self, request: av_transport::PauseRequest) -> Result<()>;
    async fn play(&self, request: av_transport::PlayRequest) -> Result<()>;
    async fn previous(&self, request: av_transport::PreviousRequest) -> Result<()>;
    async fn remove_all_tracks_from_queue(
        &self,
        request: av_transport::RemoveAllTracksFromQueueRequest,
    ) -> Result<()>;
    async fn remove_track_from_queue(
        &self,
        request: av_transport::RemoveTrackFromQueueRequest,
    ) -> Result<()>;
    async fn remove_track_range_from_queue(
        &self,
        request: av_transport::RemoveTrackRangeFromQueueRequest,
    ) -> Result<av_transport::RemoveTrackRangeFromQueueResponse>;
    async fn reorder_tracks_in_queue(
        &self,
        request: av_transport::ReorderTracksInQueueRequest,
    ) -> Result<()>;
    async fn reorder_tracks_in_saved_queue(
        &self,
        request: av_transport::ReorderTracksInSavedQueueRequest,
    ) -> Result<av_transport::ReorderTracksInSavedQueueResponse>;
    async fn run_alarm(&self, request: av_transport::RunAlarmRequest) -> Result<()>;
    async fn save_queue(
        &self,
        request: av_transport::SaveQueueRequest,
    ) -> Result<av_transport::SaveQueueResponse>;
    async fn seek(&self, request: av_transport::SeekRequest) -> Result<()>;
    async fn set_av_transport_uri(
        &self,
        request: av_transport::SetAvTransportUriRequest,
    ) -> Result<()>;
    async fn set_crossfade_mode(
        &self,
        request: av_transport::SetCrossfadeModeRequest,
    ) -> Result<()>;
    async fn set_next_av_transport_uri(
        &self,
        request: av_transport::SetNextAvTransportUriRequest,
    ) -> Result<()>;
    async fn set_play_mode(&self, request: av_transport::SetPlayModeRequest) -> Result<()>;
    async fn snooze_alarm(&self, request: av_transport::SnoozeAlarmRequest) -> Result<()>;
    async fn start_autoplay(&self, request: av_transport::StartAutoplayRequest) -> Result<()>;
    async fn stop(&self, request: av_transport::StopRequest) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait AlarmClock {
    async fn create_alarm(
        &self,
        request: alarm_clock::CreateAlarmRequest,
    ) -> Result<alarm_clock::CreateAlarmResponse>;
    async fn destroy_alarm(&self, request: alarm_clock::DestroyAlarmRequest) -> Result<()>;
    async fn get_daily_index_refresh_time(
        &self,
    ) -> Result<alarm_clock::GetDailyIndexRefreshTimeResponse>;
    async fn get_format(&self) -> Result<alarm_clock::GetFormatResponse>;
    async fn get_household_time_at_stamp(
        &self,
        request: alarm_clock::GetHouseholdTimeAtStampRequest,
    ) -> Result<alarm_clock::GetHouseholdTimeAtStampResponse>;
    async fn get_time_now(&self) -> Result<alarm_clock::GetTimeNowResponse>;
    async fn get_time_server(&self) -> Result<alarm_clock::GetTimeServerResponse>;
    async fn get_time_zone(&self) -> Result<alarm_clock::GetTimeZoneResponse>;
    async fn get_time_zone_and_rule(&self) -> Result<alarm_clock::GetTimeZoneAndRuleResponse>;
    async fn get_time_zone_rule(
        &self,
        request: alarm_clock::GetTimeZoneRuleRequest,
    ) -> Result<alarm_clock::GetTimeZoneRuleResponse>;
    async fn list_alarms(&self) -> Result<alarm_clock::ListAlarmsResponse>;
    async fn set_daily_index_refresh_time(
        &self,
        request: alarm_clock::SetDailyIndexRefreshTimeRequest,
    ) -> Result<()>;
    async fn set_format(&self, request: alarm_clock::SetFormatRequest) -> Result<()>;
    async fn set_time_now(&self, request: alarm_clock::SetTimeNowRequest) -> Result<()>;
    async fn set_time_server(&self, request: alarm_clock::SetTimeServerRequest) -> Result<()>;
    async fn set_time_zone(&self, request: alarm_clock::SetTimeZoneRequest) -> Result<()>;
    async fn update_alarm(&self, request: alarm_clock::UpdateAlarmRequest) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait AudioIn {
    async fn get_audio_input_attributes(&self)
        -> Result<audio_in::GetAudioInputAttributesResponse>;
    async fn get_line_in_level(&self) -> Result<audio_in::GetLineInLevelResponse>;
    async fn select_audio(&self, request: audio_in::SelectAudioRequest) -> Result<()>;
    async fn set_audio_input_attributes(
        &self,
        request: audio_in::SetAudioInputAttributesRequest,
    ) -> Result<()>;
    async fn set_line_in_level(&self, request: audio_in::SetLineInLevelRequest) -> Result<()>;
    async fn start_transmission_to_group(
        &self,
        request: audio_in::StartTransmissionToGroupRequest,
    ) -> Result<audio_in::StartTransmissionToGroupResponse>;
    async fn stop_transmission_to_group(
        &self,
        request: audio_in::StopTransmissionToGroupRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait ConnectionManager {
    async fn get_current_connection_ids(
        &self,
    ) -> Result<connection_manager::GetCurrentConnectionIdsResponse>;
    async fn get_current_connection_info(
        &self,
        request: connection_manager::GetCurrentConnectionInfoRequest,
    ) -> Result<connection_manager::GetCurrentConnectionInfoResponse>;
    async fn get_protocol_info(&self) -> Result<connection_manager::GetProtocolInfoResponse>;
}
#[allow(async_fn_in_trait)]
pub trait ContentDirectory {
    async fn browse(
        &self,
        request: content_directory::BrowseRequest,
    ) -> Result<content_directory::BrowseResponse>;
    async fn create_object(
        &self,
        request: content_directory::CreateObjectRequest,
    ) -> Result<content_directory::CreateObjectResponse>;
    async fn destroy_object(&self, request: content_directory::DestroyObjectRequest) -> Result<()>;
    async fn find_prefix(
        &self,
        request: content_directory::FindPrefixRequest,
    ) -> Result<content_directory::FindPrefixResponse>;
    async fn get_album_artist_display_option(
        &self,
    ) -> Result<content_directory::GetAlbumArtistDisplayOptionResponse>;
    async fn get_all_prefix_locations(
        &self,
        request: content_directory::GetAllPrefixLocationsRequest,
    ) -> Result<content_directory::GetAllPrefixLocationsResponse>;
    async fn get_browseable(&self) -> Result<content_directory::GetBrowseableResponse>;
    async fn get_last_index_change(&self) -> Result<content_directory::GetLastIndexChangeResponse>;
    async fn get_search_capabilities(
        &self,
    ) -> Result<content_directory::GetSearchCapabilitiesResponse>;
    async fn get_share_index_in_progress(
        &self,
    ) -> Result<content_directory::GetShareIndexInProgressResponse>;
    async fn get_sort_capabilities(&self)
        -> Result<content_directory::GetSortCapabilitiesResponse>;
    async fn get_system_update_id(&self) -> Result<content_directory::GetSystemUpdateIdResponse>;
    async fn refresh_share_index(
        &self,
        request: content_directory::RefreshShareIndexRequest,
    ) -> Result<()>;
    async fn request_resort(&self, request: content_directory::RequestResortRequest) -> Result<()>;
    async fn set_browseable(&self, request: content_directory::SetBrowseableRequest) -> Result<()>;
    async fn update_object(&self, request: content_directory::UpdateObjectRequest) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait DeviceProperties {
    async fn add_bonded_zones(
        &self,
        request: device_properties::AddBondedZonesRequest,
    ) -> Result<()>;
    async fn add_ht_satellite(
        &self,
        request: device_properties::AddHtSatelliteRequest,
    ) -> Result<()>;
    async fn create_stereo_pair(
        &self,
        request: device_properties::CreateStereoPairRequest,
    ) -> Result<()>;
    async fn enter_config_mode(
        &self,
        request: device_properties::EnterConfigModeRequest,
    ) -> Result<device_properties::EnterConfigModeResponse>;
    async fn exit_config_mode(
        &self,
        request: device_properties::ExitConfigModeRequest,
    ) -> Result<()>;
    async fn get_autoplay_linked_zones(
        &self,
        request: device_properties::GetAutoplayLinkedZonesRequest,
    ) -> Result<device_properties::GetAutoplayLinkedZonesResponse>;
    async fn get_autoplay_room_uuid(
        &self,
        request: device_properties::GetAutoplayRoomUuidRequest,
    ) -> Result<device_properties::GetAutoplayRoomUuidResponse>;
    async fn get_autoplay_volume(
        &self,
        request: device_properties::GetAutoplayVolumeRequest,
    ) -> Result<device_properties::GetAutoplayVolumeResponse>;
    async fn get_button_lock_state(&self) -> Result<device_properties::GetButtonLockStateResponse>;
    async fn get_button_state(&self) -> Result<device_properties::GetButtonStateResponse>;
    async fn get_ht_forward_state(&self) -> Result<device_properties::GetHtForwardStateResponse>;
    async fn get_household_id(&self) -> Result<device_properties::GetHouseholdIdResponse>;
    async fn get_led_state(&self) -> Result<device_properties::GetLedStateResponse>;
    async fn get_use_autoplay_volume(
        &self,
        request: device_properties::GetUseAutoplayVolumeRequest,
    ) -> Result<device_properties::GetUseAutoplayVolumeResponse>;
    async fn get_zone_attributes(&self) -> Result<device_properties::GetZoneAttributesResponse>;
    async fn get_zone_info(&self) -> Result<device_properties::GetZoneInfoResponse>;
    async fn remove_bonded_zones(
        &self,
        request: device_properties::RemoveBondedZonesRequest,
    ) -> Result<()>;
    async fn remove_ht_satellite(
        &self,
        request: device_properties::RemoveHtSatelliteRequest,
    ) -> Result<()>;
    async fn room_detection_start_chirping(
        &self,
        request: device_properties::RoomDetectionStartChirpingRequest,
    ) -> Result<device_properties::RoomDetectionStartChirpingResponse>;
    async fn room_detection_stop_chirping(
        &self,
        request: device_properties::RoomDetectionStopChirpingRequest,
    ) -> Result<()>;
    async fn separate_stereo_pair(
        &self,
        request: device_properties::SeparateStereoPairRequest,
    ) -> Result<()>;
    async fn set_autoplay_linked_zones(
        &self,
        request: device_properties::SetAutoplayLinkedZonesRequest,
    ) -> Result<()>;
    async fn set_autoplay_room_uuid(
        &self,
        request: device_properties::SetAutoplayRoomUuidRequest,
    ) -> Result<()>;
    async fn set_autoplay_volume(
        &self,
        request: device_properties::SetAutoplayVolumeRequest,
    ) -> Result<()>;
    async fn set_button_lock_state(
        &self,
        request: device_properties::SetButtonLockStateRequest,
    ) -> Result<()>;
    async fn set_led_state(&self, request: device_properties::SetLedStateRequest) -> Result<()>;
    async fn set_use_autoplay_volume(
        &self,
        request: device_properties::SetUseAutoplayVolumeRequest,
    ) -> Result<()>;
    async fn set_zone_attributes(
        &self,
        request: device_properties::SetZoneAttributesRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait GroupManagement {
    async fn add_member(
        &self,
        request: group_management::AddMemberRequest,
    ) -> Result<group_management::AddMemberResponse>;
    async fn remove_member(&self, request: group_management::RemoveMemberRequest) -> Result<()>;
    async fn report_track_buffering_result(
        &self,
        request: group_management::ReportTrackBufferingResultRequest,
    ) -> Result<()>;
    async fn set_source_area_ids(
        &self,
        request: group_management::SetSourceAreaIdsRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait GroupRenderingControl {
    async fn get_group_mute(
        &self,
        request: group_rendering_control::GetGroupMuteRequest,
    ) -> Result<group_rendering_control::GetGroupMuteResponse>;
    async fn get_group_volume(
        &self,
        request: group_rendering_control::GetGroupVolumeRequest,
    ) -> Result<group_rendering_control::GetGroupVolumeResponse>;
    async fn set_group_mute(
        &self,
        request: group_rendering_control::SetGroupMuteRequest,
    ) -> Result<()>;
    async fn set_group_volume(
        &self,
        request: group_rendering_control::SetGroupVolumeRequest,
    ) -> Result<()>;
    async fn set_relative_group_volume(
        &self,
        request: group_rendering_control::SetRelativeGroupVolumeRequest,
    ) -> Result<group_rendering_control::SetRelativeGroupVolumeResponse>;
    async fn snapshot_group_volume(
        &self,
        request: group_rendering_control::SnapshotGroupVolumeRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait HTControl {
    async fn commit_learned_ir_codes(
        &self,
        request: ht_control::CommitLearnedIrCodesRequest,
    ) -> Result<()>;
    async fn get_ir_repeater_state(&self) -> Result<ht_control::GetIrRepeaterStateResponse>;
    async fn get_led_feedback_state(&self) -> Result<ht_control::GetLedFeedbackStateResponse>;
    async fn identify_ir_remote(&self, request: ht_control::IdentifyIrRemoteRequest) -> Result<()>;
    async fn is_remote_configured(&self) -> Result<ht_control::IsRemoteConfiguredResponse>;
    async fn learn_ir_code(&self, request: ht_control::LearnIrCodeRequest) -> Result<()>;
    async fn set_ir_repeater_state(
        &self,
        request: ht_control::SetIrRepeaterStateRequest,
    ) -> Result<()>;
    async fn set_led_feedback_state(
        &self,
        request: ht_control::SetLedFeedbackStateRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait MusicServices {
    async fn get_session_id(
        &self,
        request: music_services::GetSessionIdRequest,
    ) -> Result<music_services::GetSessionIdResponse>;
    async fn list_available_services(
        &self,
    ) -> Result<music_services::ListAvailableServicesResponse>;
    async fn update_available_services(&self) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait QPlay {
    async fn q_play_auth(
        &self,
        request: q_play::QPlayAuthRequest,
    ) -> Result<q_play::QPlayAuthResponse>;
}
#[allow(async_fn_in_trait)]
pub trait Queue {
    async fn add_multiple_uris(
        &self,
        request: queue::AddMultipleUrisRequest,
    ) -> Result<queue::AddMultipleUrisResponse>;
    async fn add_uri(&self, request: queue::AddUriRequest) -> Result<queue::AddUriResponse>;
    async fn attach_queue(
        &self,
        request: queue::AttachQueueRequest,
    ) -> Result<queue::AttachQueueResponse>;
    async fn backup(&self) -> Result<()>;
    async fn browse(&self, request: queue::BrowseRequest) -> Result<queue::BrowseResponse>;
    async fn create_queue(
        &self,
        request: queue::CreateQueueRequest,
    ) -> Result<queue::CreateQueueResponse>;
    async fn remove_all_tracks(
        &self,
        request: queue::RemoveAllTracksRequest,
    ) -> Result<queue::RemoveAllTracksResponse>;
    async fn remove_track_range(
        &self,
        request: queue::RemoveTrackRangeRequest,
    ) -> Result<queue::RemoveTrackRangeResponse>;
    async fn reorder_tracks(
        &self,
        request: queue::ReorderTracksRequest,
    ) -> Result<queue::ReorderTracksResponse>;
    async fn replace_all_tracks(
        &self,
        request: queue::ReplaceAllTracksRequest,
    ) -> Result<queue::ReplaceAllTracksResponse>;
    async fn save_as_sonos_playlist(
        &self,
        request: queue::SaveAsSonosPlaylistRequest,
    ) -> Result<queue::SaveAsSonosPlaylistResponse>;
}
#[allow(async_fn_in_trait)]
pub trait RenderingControl {
    async fn get_bass(
        &self,
        request: rendering_control::GetBassRequest,
    ) -> Result<rendering_control::GetBassResponse>;
    async fn get_eq(
        &self,
        request: rendering_control::GetEqRequest,
    ) -> Result<rendering_control::GetEqResponse>;
    async fn get_headphone_connected(
        &self,
        request: rendering_control::GetHeadphoneConnectedRequest,
    ) -> Result<rendering_control::GetHeadphoneConnectedResponse>;
    async fn get_loudness(
        &self,
        request: rendering_control::GetLoudnessRequest,
    ) -> Result<rendering_control::GetLoudnessResponse>;
    async fn get_mute(
        &self,
        request: rendering_control::GetMuteRequest,
    ) -> Result<rendering_control::GetMuteResponse>;
    async fn get_output_fixed(
        &self,
        request: rendering_control::GetOutputFixedRequest,
    ) -> Result<rendering_control::GetOutputFixedResponse>;
    async fn get_room_calibration_status(
        &self,
        request: rendering_control::GetRoomCalibrationStatusRequest,
    ) -> Result<rendering_control::GetRoomCalibrationStatusResponse>;
    async fn get_supports_output_fixed(
        &self,
        request: rendering_control::GetSupportsOutputFixedRequest,
    ) -> Result<rendering_control::GetSupportsOutputFixedResponse>;
    async fn get_treble(
        &self,
        request: rendering_control::GetTrebleRequest,
    ) -> Result<rendering_control::GetTrebleResponse>;
    async fn get_volume(
        &self,
        request: rendering_control::GetVolumeRequest,
    ) -> Result<rendering_control::GetVolumeResponse>;
    async fn get_volume_db(
        &self,
        request: rendering_control::GetVolumeDbRequest,
    ) -> Result<rendering_control::GetVolumeDbResponse>;
    async fn get_volume_db_range(
        &self,
        request: rendering_control::GetVolumeDbRangeRequest,
    ) -> Result<rendering_control::GetVolumeDbRangeResponse>;
    async fn ramp_to_volume(
        &self,
        request: rendering_control::RampToVolumeRequest,
    ) -> Result<rendering_control::RampToVolumeResponse>;
    async fn reset_basic_eq(
        &self,
        request: rendering_control::ResetBasicEqRequest,
    ) -> Result<rendering_control::ResetBasicEqResponse>;
    async fn reset_ext_eq(&self, request: rendering_control::ResetExtEqRequest) -> Result<()>;
    async fn restore_volume_prior_to_ramp(
        &self,
        request: rendering_control::RestoreVolumePriorToRampRequest,
    ) -> Result<()>;
    async fn set_bass(&self, request: rendering_control::SetBassRequest) -> Result<()>;
    async fn set_channel_map(&self, request: rendering_control::SetChannelMapRequest)
        -> Result<()>;
    async fn set_eq(&self, request: rendering_control::SetEqRequest) -> Result<()>;
    async fn set_loudness(&self, request: rendering_control::SetLoudnessRequest) -> Result<()>;
    async fn set_mute(&self, request: rendering_control::SetMuteRequest) -> Result<()>;
    async fn set_output_fixed(
        &self,
        request: rendering_control::SetOutputFixedRequest,
    ) -> Result<()>;
    async fn set_relative_volume(
        &self,
        request: rendering_control::SetRelativeVolumeRequest,
    ) -> Result<rendering_control::SetRelativeVolumeResponse>;
    async fn set_room_calibration_status(
        &self,
        request: rendering_control::SetRoomCalibrationStatusRequest,
    ) -> Result<()>;
    async fn set_room_calibration_x(
        &self,
        request: rendering_control::SetRoomCalibrationXRequest,
    ) -> Result<()>;
    async fn set_treble(&self, request: rendering_control::SetTrebleRequest) -> Result<()>;
    async fn set_volume(&self, request: rendering_control::SetVolumeRequest) -> Result<()>;
    async fn set_volume_db(&self, request: rendering_control::SetVolumeDbRequest) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait SystemProperties {
    async fn add_account_x(
        &self,
        request: system_properties::AddAccountXRequest,
    ) -> Result<system_properties::AddAccountXResponse>;
    async fn add_o_auth_account_x(
        &self,
        request: system_properties::AddOAuthAccountXRequest,
    ) -> Result<system_properties::AddOAuthAccountXResponse>;
    async fn do_post_update_tasks(&self) -> Result<()>;
    async fn edit_account_md(&self, request: system_properties::EditAccountMdRequest)
        -> Result<()>;
    async fn edit_account_password_x(
        &self,
        request: system_properties::EditAccountPasswordXRequest,
    ) -> Result<()>;
    async fn enable_rdm(&self, request: system_properties::EnableRdmRequest) -> Result<()>;
    async fn get_rdm(&self) -> Result<system_properties::GetRdmResponse>;
    async fn get_string(
        &self,
        request: system_properties::GetStringRequest,
    ) -> Result<system_properties::GetStringResponse>;
    async fn get_web_code(
        &self,
        request: system_properties::GetWebCodeRequest,
    ) -> Result<system_properties::GetWebCodeResponse>;
    async fn provision_credentialed_trial_account_x(
        &self,
        request: system_properties::ProvisionCredentialedTrialAccountXRequest,
    ) -> Result<system_properties::ProvisionCredentialedTrialAccountXResponse>;
    async fn refresh_account_credentials_x(
        &self,
        request: system_properties::RefreshAccountCredentialsXRequest,
    ) -> Result<()>;
    async fn remove(&self, request: system_properties::RemoveRequest) -> Result<()>;
    async fn remove_account(&self, request: system_properties::RemoveAccountRequest) -> Result<()>;
    async fn replace_account_x(
        &self,
        request: system_properties::ReplaceAccountXRequest,
    ) -> Result<system_properties::ReplaceAccountXResponse>;
    async fn reset_third_party_credentials(&self) -> Result<()>;
    async fn set_account_nickname_x(
        &self,
        request: system_properties::SetAccountNicknameXRequest,
    ) -> Result<()>;
    async fn set_string(&self, request: system_properties::SetStringRequest) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait VirtualLineIn {
    async fn next(&self, request: virtual_line_in::NextRequest) -> Result<()>;
    async fn pause(&self, request: virtual_line_in::PauseRequest) -> Result<()>;
    async fn play(&self, request: virtual_line_in::PlayRequest) -> Result<()>;
    async fn previous(&self, request: virtual_line_in::PreviousRequest) -> Result<()>;
    async fn set_volume(&self, request: virtual_line_in::SetVolumeRequest) -> Result<()>;
    async fn start_transmission(
        &self,
        request: virtual_line_in::StartTransmissionRequest,
    ) -> Result<virtual_line_in::StartTransmissionResponse>;
    async fn stop(&self, request: virtual_line_in::StopRequest) -> Result<()>;
    async fn stop_transmission(
        &self,
        request: virtual_line_in::StopTransmissionRequest,
    ) -> Result<()>;
}
#[allow(async_fn_in_trait)]
pub trait ZoneGroupTopology {
    async fn begin_software_update(
        &self,
        request: zone_group_topology::BeginSoftwareUpdateRequest,
    ) -> Result<()>;
    async fn check_for_update(
        &self,
        request: zone_group_topology::CheckForUpdateRequest,
    ) -> Result<zone_group_topology::CheckForUpdateResponse>;
    async fn get_zone_group_attributes(
        &self,
    ) -> Result<zone_group_topology::GetZoneGroupAttributesResponse>;
    async fn get_zone_group_state(&self) -> Result<zone_group_topology::GetZoneGroupStateResponse>;
    async fn register_mobile_device(
        &self,
        request: zone_group_topology::RegisterMobileDeviceRequest,
    ) -> Result<()>;
    async fn report_alarm_started_running(&self) -> Result<()>;
    async fn report_unresponsive_device(
        &self,
        request: zone_group_topology::ReportUnresponsiveDeviceRequest,
    ) -> Result<()>;
    async fn submit_diagnostics(
        &self,
        request: zone_group_topology::SubmitDiagnosticsRequest,
    ) -> Result<zone_group_topology::SubmitDiagnosticsResponse>;
}

impl AVTransport for SonosDevice {
    async fn add_multiple_uris_to_queue(
        &self,
        request: av_transport::AddMultipleUrisToQueueRequest,
    ) -> Result<av_transport::AddMultipleUrisToQueueResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "AddMultipleURIsToQueue",
            request,
        )
        .await
    }

    async fn add_uri_to_queue(
        &self,
        request: av_transport::AddUriToQueueRequest,
    ) -> Result<av_transport::AddUriToQueueResponse> {
        self.action(&av_transport::SERVICE_TYPE, "AddURIToQueue", request)
            .await
    }

    async fn add_uri_to_saved_queue(
        &self,
        request: av_transport::AddUriToSavedQueueRequest,
    ) -> Result<av_transport::AddUriToSavedQueueResponse> {
        self.action(&av_transport::SERVICE_TYPE, "AddURIToSavedQueue", request)
            .await
    }

    async fn backup_queue(&self, request: av_transport::BackupQueueRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "BackupQueue", request)
            .await
    }

    async fn become_coordinator_of_standalone_group(
        &self,
        request: av_transport::BecomeCoordinatorOfStandaloneGroupRequest,
    ) -> Result<av_transport::BecomeCoordinatorOfStandaloneGroupResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "BecomeCoordinatorOfStandaloneGroup",
            request,
        )
        .await
    }

    async fn become_group_coordinator(
        &self,
        request: av_transport::BecomeGroupCoordinatorRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "BecomeGroupCoordinator",
            request,
        )
        .await
    }

    async fn become_group_coordinator_and_source(
        &self,
        request: av_transport::BecomeGroupCoordinatorAndSourceRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "BecomeGroupCoordinatorAndSource",
            request,
        )
        .await
    }

    async fn change_coordinator(
        &self,
        request: av_transport::ChangeCoordinatorRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "ChangeCoordinator", request)
            .await
    }

    async fn change_transport_settings(
        &self,
        request: av_transport::ChangeTransportSettingsRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "ChangeTransportSettings",
            request,
        )
        .await
    }

    async fn configure_sleep_timer(
        &self,
        request: av_transport::ConfigureSleepTimerRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "ConfigureSleepTimer", request)
            .await
    }

    async fn create_saved_queue(
        &self,
        request: av_transport::CreateSavedQueueRequest,
    ) -> Result<av_transport::CreateSavedQueueResponse> {
        self.action(&av_transport::SERVICE_TYPE, "CreateSavedQueue", request)
            .await
    }

    async fn delegate_group_coordination_to(
        &self,
        request: av_transport::DelegateGroupCoordinationToRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "DelegateGroupCoordinationTo",
            request,
        )
        .await
    }

    async fn end_direct_control_session(
        &self,
        request: av_transport::EndDirectControlSessionRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "EndDirectControlSession",
            request,
        )
        .await
    }

    async fn get_crossfade_mode(
        &self,
        request: av_transport::GetCrossfadeModeRequest,
    ) -> Result<av_transport::GetCrossfadeModeResponse> {
        self.action(&av_transport::SERVICE_TYPE, "GetCrossfadeMode", request)
            .await
    }

    async fn get_current_transport_actions(
        &self,
        request: av_transport::GetCurrentTransportActionsRequest,
    ) -> Result<av_transport::GetCurrentTransportActionsResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "GetCurrentTransportActions",
            request,
        )
        .await
    }

    async fn get_device_capabilities(
        &self,
        request: av_transport::GetDeviceCapabilitiesRequest,
    ) -> Result<av_transport::GetDeviceCapabilitiesResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "GetDeviceCapabilities",
            request,
        )
        .await
    }

    async fn get_media_info(
        &self,
        request: av_transport::GetMediaInfoRequest,
    ) -> Result<av_transport::GetMediaInfoResponse> {
        self.action(&av_transport::SERVICE_TYPE, "GetMediaInfo", request)
            .await
    }

    async fn get_position_info(
        &self,
        request: av_transport::GetPositionInfoRequest,
    ) -> Result<av_transport::GetPositionInfoResponse> {
        self.action(&av_transport::SERVICE_TYPE, "GetPositionInfo", request)
            .await
    }

    async fn get_remaining_sleep_timer_duration(
        &self,
        request: av_transport::GetRemainingSleepTimerDurationRequest,
    ) -> Result<av_transport::GetRemainingSleepTimerDurationResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "GetRemainingSleepTimerDuration",
            request,
        )
        .await
    }

    async fn get_running_alarm_properties(
        &self,
        request: av_transport::GetRunningAlarmPropertiesRequest,
    ) -> Result<av_transport::GetRunningAlarmPropertiesResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "GetRunningAlarmProperties",
            request,
        )
        .await
    }

    async fn get_transport_info(
        &self,
        request: av_transport::GetTransportInfoRequest,
    ) -> Result<av_transport::GetTransportInfoResponse> {
        self.action(&av_transport::SERVICE_TYPE, "GetTransportInfo", request)
            .await
    }

    async fn get_transport_settings(
        &self,
        request: av_transport::GetTransportSettingsRequest,
    ) -> Result<av_transport::GetTransportSettingsResponse> {
        self.action(&av_transport::SERVICE_TYPE, "GetTransportSettings", request)
            .await
    }

    async fn next(&self, request: av_transport::NextRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Next", request)
            .await
    }

    async fn notify_deleted_uri(
        &self,
        request: av_transport::NotifyDeletedUriRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "NotifyDeletedURI", request)
            .await
    }

    async fn pause(&self, request: av_transport::PauseRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Pause", request)
            .await
    }

    async fn play(&self, request: av_transport::PlayRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Play", request)
            .await
    }

    async fn previous(&self, request: av_transport::PreviousRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Previous", request)
            .await
    }

    async fn remove_all_tracks_from_queue(
        &self,
        request: av_transport::RemoveAllTracksFromQueueRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "RemoveAllTracksFromQueue",
            request,
        )
        .await
    }

    async fn remove_track_from_queue(
        &self,
        request: av_transport::RemoveTrackFromQueueRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "RemoveTrackFromQueue", request)
            .await
    }

    async fn remove_track_range_from_queue(
        &self,
        request: av_transport::RemoveTrackRangeFromQueueRequest,
    ) -> Result<av_transport::RemoveTrackRangeFromQueueResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "RemoveTrackRangeFromQueue",
            request,
        )
        .await
    }

    async fn reorder_tracks_in_queue(
        &self,
        request: av_transport::ReorderTracksInQueueRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "ReorderTracksInQueue", request)
            .await
    }

    async fn reorder_tracks_in_saved_queue(
        &self,
        request: av_transport::ReorderTracksInSavedQueueRequest,
    ) -> Result<av_transport::ReorderTracksInSavedQueueResponse> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "ReorderTracksInSavedQueue",
            request,
        )
        .await
    }

    async fn run_alarm(&self, request: av_transport::RunAlarmRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "RunAlarm", request)
            .await
    }

    async fn save_queue(
        &self,
        request: av_transport::SaveQueueRequest,
    ) -> Result<av_transport::SaveQueueResponse> {
        self.action(&av_transport::SERVICE_TYPE, "SaveQueue", request)
            .await
    }

    async fn seek(&self, request: av_transport::SeekRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Seek", request)
            .await
    }

    async fn set_av_transport_uri(
        &self,
        request: av_transport::SetAvTransportUriRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "SetAVTransportURI", request)
            .await
    }

    async fn set_crossfade_mode(
        &self,
        request: av_transport::SetCrossfadeModeRequest,
    ) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "SetCrossfadeMode", request)
            .await
    }

    async fn set_next_av_transport_uri(
        &self,
        request: av_transport::SetNextAvTransportUriRequest,
    ) -> Result<()> {
        self.action(
            &av_transport::SERVICE_TYPE,
            "SetNextAVTransportURI",
            request,
        )
        .await
    }

    async fn set_play_mode(&self, request: av_transport::SetPlayModeRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "SetPlayMode", request)
            .await
    }

    async fn snooze_alarm(&self, request: av_transport::SnoozeAlarmRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "SnoozeAlarm", request)
            .await
    }

    async fn start_autoplay(&self, request: av_transport::StartAutoplayRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "StartAutoplay", request)
            .await
    }

    async fn stop(&self, request: av_transport::StopRequest) -> Result<()> {
        self.action(&av_transport::SERVICE_TYPE, "Stop", request)
            .await
    }
}
impl AlarmClock for SonosDevice {
    async fn create_alarm(
        &self,
        request: alarm_clock::CreateAlarmRequest,
    ) -> Result<alarm_clock::CreateAlarmResponse> {
        self.action(&alarm_clock::SERVICE_TYPE, "CreateAlarm", request)
            .await
    }

    async fn destroy_alarm(&self, request: alarm_clock::DestroyAlarmRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "DestroyAlarm", request)
            .await
    }

    async fn get_daily_index_refresh_time(
        &self,
    ) -> Result<alarm_clock::GetDailyIndexRefreshTimeResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetDailyIndexRefreshTime",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_format(&self) -> Result<alarm_clock::GetFormatResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetFormat",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_household_time_at_stamp(
        &self,
        request: alarm_clock::GetHouseholdTimeAtStampRequest,
    ) -> Result<alarm_clock::GetHouseholdTimeAtStampResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetHouseholdTimeAtStamp",
            request,
        )
        .await
    }

    async fn get_time_now(&self) -> Result<alarm_clock::GetTimeNowResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetTimeNow",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_time_server(&self) -> Result<alarm_clock::GetTimeServerResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetTimeServer",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_time_zone(&self) -> Result<alarm_clock::GetTimeZoneResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetTimeZone",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_time_zone_and_rule(&self) -> Result<alarm_clock::GetTimeZoneAndRuleResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "GetTimeZoneAndRule",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_time_zone_rule(
        &self,
        request: alarm_clock::GetTimeZoneRuleRequest,
    ) -> Result<alarm_clock::GetTimeZoneRuleResponse> {
        self.action(&alarm_clock::SERVICE_TYPE, "GetTimeZoneRule", request)
            .await
    }

    async fn list_alarms(&self) -> Result<alarm_clock::ListAlarmsResponse> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "ListAlarms",
            crate::soap::Unit {},
        )
        .await
    }

    async fn set_daily_index_refresh_time(
        &self,
        request: alarm_clock::SetDailyIndexRefreshTimeRequest,
    ) -> Result<()> {
        self.action(
            &alarm_clock::SERVICE_TYPE,
            "SetDailyIndexRefreshTime",
            request,
        )
        .await
    }

    async fn set_format(&self, request: alarm_clock::SetFormatRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "SetFormat", request)
            .await
    }

    async fn set_time_now(&self, request: alarm_clock::SetTimeNowRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "SetTimeNow", request)
            .await
    }

    async fn set_time_server(&self, request: alarm_clock::SetTimeServerRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "SetTimeServer", request)
            .await
    }

    async fn set_time_zone(&self, request: alarm_clock::SetTimeZoneRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "SetTimeZone", request)
            .await
    }

    async fn update_alarm(&self, request: alarm_clock::UpdateAlarmRequest) -> Result<()> {
        self.action(&alarm_clock::SERVICE_TYPE, "UpdateAlarm", request)
            .await
    }
}
impl AudioIn for SonosDevice {
    async fn get_audio_input_attributes(
        &self,
    ) -> Result<audio_in::GetAudioInputAttributesResponse> {
        self.action(
            &audio_in::SERVICE_TYPE,
            "GetAudioInputAttributes",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_line_in_level(&self) -> Result<audio_in::GetLineInLevelResponse> {
        self.action(
            &audio_in::SERVICE_TYPE,
            "GetLineInLevel",
            crate::soap::Unit {},
        )
        .await
    }

    async fn select_audio(&self, request: audio_in::SelectAudioRequest) -> Result<()> {
        self.action(&audio_in::SERVICE_TYPE, "SelectAudio", request)
            .await
    }

    async fn set_audio_input_attributes(
        &self,
        request: audio_in::SetAudioInputAttributesRequest,
    ) -> Result<()> {
        self.action(&audio_in::SERVICE_TYPE, "SetAudioInputAttributes", request)
            .await
    }

    async fn set_line_in_level(&self, request: audio_in::SetLineInLevelRequest) -> Result<()> {
        self.action(&audio_in::SERVICE_TYPE, "SetLineInLevel", request)
            .await
    }

    async fn start_transmission_to_group(
        &self,
        request: audio_in::StartTransmissionToGroupRequest,
    ) -> Result<audio_in::StartTransmissionToGroupResponse> {
        self.action(&audio_in::SERVICE_TYPE, "StartTransmissionToGroup", request)
            .await
    }

    async fn stop_transmission_to_group(
        &self,
        request: audio_in::StopTransmissionToGroupRequest,
    ) -> Result<()> {
        self.action(&audio_in::SERVICE_TYPE, "StopTransmissionToGroup", request)
            .await
    }
}
impl ConnectionManager for SonosDevice {
    async fn get_current_connection_ids(
        &self,
    ) -> Result<connection_manager::GetCurrentConnectionIdsResponse> {
        self.action(
            &connection_manager::SERVICE_TYPE,
            "GetCurrentConnectionIDs",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_current_connection_info(
        &self,
        request: connection_manager::GetCurrentConnectionInfoRequest,
    ) -> Result<connection_manager::GetCurrentConnectionInfoResponse> {
        self.action(
            &connection_manager::SERVICE_TYPE,
            "GetCurrentConnectionInfo",
            request,
        )
        .await
    }

    async fn get_protocol_info(&self) -> Result<connection_manager::GetProtocolInfoResponse> {
        self.action(
            &connection_manager::SERVICE_TYPE,
            "GetProtocolInfo",
            crate::soap::Unit {},
        )
        .await
    }
}
impl ContentDirectory for SonosDevice {
    async fn browse(
        &self,
        request: content_directory::BrowseRequest,
    ) -> Result<content_directory::BrowseResponse> {
        self.action(&content_directory::SERVICE_TYPE, "Browse", request)
            .await
    }

    async fn create_object(
        &self,
        request: content_directory::CreateObjectRequest,
    ) -> Result<content_directory::CreateObjectResponse> {
        self.action(&content_directory::SERVICE_TYPE, "CreateObject", request)
            .await
    }

    async fn destroy_object(&self, request: content_directory::DestroyObjectRequest) -> Result<()> {
        self.action(&content_directory::SERVICE_TYPE, "DestroyObject", request)
            .await
    }

    async fn find_prefix(
        &self,
        request: content_directory::FindPrefixRequest,
    ) -> Result<content_directory::FindPrefixResponse> {
        self.action(&content_directory::SERVICE_TYPE, "FindPrefix", request)
            .await
    }

    async fn get_album_artist_display_option(
        &self,
    ) -> Result<content_directory::GetAlbumArtistDisplayOptionResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetAlbumArtistDisplayOption",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_all_prefix_locations(
        &self,
        request: content_directory::GetAllPrefixLocationsRequest,
    ) -> Result<content_directory::GetAllPrefixLocationsResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetAllPrefixLocations",
            request,
        )
        .await
    }

    async fn get_browseable(&self) -> Result<content_directory::GetBrowseableResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetBrowseable",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_last_index_change(&self) -> Result<content_directory::GetLastIndexChangeResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetLastIndexChange",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_search_capabilities(
        &self,
    ) -> Result<content_directory::GetSearchCapabilitiesResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetSearchCapabilities",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_share_index_in_progress(
        &self,
    ) -> Result<content_directory::GetShareIndexInProgressResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetShareIndexInProgress",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_sort_capabilities(
        &self,
    ) -> Result<content_directory::GetSortCapabilitiesResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetSortCapabilities",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_system_update_id(&self) -> Result<content_directory::GetSystemUpdateIdResponse> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "GetSystemUpdateID",
            crate::soap::Unit {},
        )
        .await
    }

    async fn refresh_share_index(
        &self,
        request: content_directory::RefreshShareIndexRequest,
    ) -> Result<()> {
        self.action(
            &content_directory::SERVICE_TYPE,
            "RefreshShareIndex",
            request,
        )
        .await
    }

    async fn request_resort(&self, request: content_directory::RequestResortRequest) -> Result<()> {
        self.action(&content_directory::SERVICE_TYPE, "RequestResort", request)
            .await
    }

    async fn set_browseable(&self, request: content_directory::SetBrowseableRequest) -> Result<()> {
        self.action(&content_directory::SERVICE_TYPE, "SetBrowseable", request)
            .await
    }

    async fn update_object(&self, request: content_directory::UpdateObjectRequest) -> Result<()> {
        self.action(&content_directory::SERVICE_TYPE, "UpdateObject", request)
            .await
    }
}
impl DeviceProperties for SonosDevice {
    async fn add_bonded_zones(
        &self,
        request: device_properties::AddBondedZonesRequest,
    ) -> Result<()> {
        self.action(&device_properties::SERVICE_TYPE, "AddBondedZones", request)
            .await
    }

    async fn add_ht_satellite(
        &self,
        request: device_properties::AddHtSatelliteRequest,
    ) -> Result<()> {
        self.action(&device_properties::SERVICE_TYPE, "AddHTSatellite", request)
            .await
    }

    async fn create_stereo_pair(
        &self,
        request: device_properties::CreateStereoPairRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "CreateStereoPair",
            request,
        )
        .await
    }

    async fn enter_config_mode(
        &self,
        request: device_properties::EnterConfigModeRequest,
    ) -> Result<device_properties::EnterConfigModeResponse> {
        self.action(&device_properties::SERVICE_TYPE, "EnterConfigMode", request)
            .await
    }

    async fn exit_config_mode(
        &self,
        request: device_properties::ExitConfigModeRequest,
    ) -> Result<()> {
        self.action(&device_properties::SERVICE_TYPE, "ExitConfigMode", request)
            .await
    }

    async fn get_autoplay_linked_zones(
        &self,
        request: device_properties::GetAutoplayLinkedZonesRequest,
    ) -> Result<device_properties::GetAutoplayLinkedZonesResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetAutoplayLinkedZones",
            request,
        )
        .await
    }

    async fn get_autoplay_room_uuid(
        &self,
        request: device_properties::GetAutoplayRoomUuidRequest,
    ) -> Result<device_properties::GetAutoplayRoomUuidResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetAutoplayRoomUUID",
            request,
        )
        .await
    }

    async fn get_autoplay_volume(
        &self,
        request: device_properties::GetAutoplayVolumeRequest,
    ) -> Result<device_properties::GetAutoplayVolumeResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetAutoplayVolume",
            request,
        )
        .await
    }

    async fn get_button_lock_state(&self) -> Result<device_properties::GetButtonLockStateResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetButtonLockState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_button_state(&self) -> Result<device_properties::GetButtonStateResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetButtonState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_ht_forward_state(&self) -> Result<device_properties::GetHtForwardStateResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetHTForwardState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_household_id(&self) -> Result<device_properties::GetHouseholdIdResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetHouseholdID",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_led_state(&self) -> Result<device_properties::GetLedStateResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetLEDState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_use_autoplay_volume(
        &self,
        request: device_properties::GetUseAutoplayVolumeRequest,
    ) -> Result<device_properties::GetUseAutoplayVolumeResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetUseAutoplayVolume",
            request,
        )
        .await
    }

    async fn get_zone_attributes(&self) -> Result<device_properties::GetZoneAttributesResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetZoneAttributes",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_zone_info(&self) -> Result<device_properties::GetZoneInfoResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "GetZoneInfo",
            crate::soap::Unit {},
        )
        .await
    }

    async fn remove_bonded_zones(
        &self,
        request: device_properties::RemoveBondedZonesRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "RemoveBondedZones",
            request,
        )
        .await
    }

    async fn remove_ht_satellite(
        &self,
        request: device_properties::RemoveHtSatelliteRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "RemoveHTSatellite",
            request,
        )
        .await
    }

    async fn room_detection_start_chirping(
        &self,
        request: device_properties::RoomDetectionStartChirpingRequest,
    ) -> Result<device_properties::RoomDetectionStartChirpingResponse> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "RoomDetectionStartChirping",
            request,
        )
        .await
    }

    async fn room_detection_stop_chirping(
        &self,
        request: device_properties::RoomDetectionStopChirpingRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "RoomDetectionStopChirping",
            request,
        )
        .await
    }

    async fn separate_stereo_pair(
        &self,
        request: device_properties::SeparateStereoPairRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SeparateStereoPair",
            request,
        )
        .await
    }

    async fn set_autoplay_linked_zones(
        &self,
        request: device_properties::SetAutoplayLinkedZonesRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetAutoplayLinkedZones",
            request,
        )
        .await
    }

    async fn set_autoplay_room_uuid(
        &self,
        request: device_properties::SetAutoplayRoomUuidRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetAutoplayRoomUUID",
            request,
        )
        .await
    }

    async fn set_autoplay_volume(
        &self,
        request: device_properties::SetAutoplayVolumeRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetAutoplayVolume",
            request,
        )
        .await
    }

    async fn set_button_lock_state(
        &self,
        request: device_properties::SetButtonLockStateRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetButtonLockState",
            request,
        )
        .await
    }

    async fn set_led_state(&self, request: device_properties::SetLedStateRequest) -> Result<()> {
        self.action(&device_properties::SERVICE_TYPE, "SetLEDState", request)
            .await
    }

    async fn set_use_autoplay_volume(
        &self,
        request: device_properties::SetUseAutoplayVolumeRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetUseAutoplayVolume",
            request,
        )
        .await
    }

    async fn set_zone_attributes(
        &self,
        request: device_properties::SetZoneAttributesRequest,
    ) -> Result<()> {
        self.action(
            &device_properties::SERVICE_TYPE,
            "SetZoneAttributes",
            request,
        )
        .await
    }
}
impl GroupManagement for SonosDevice {
    async fn add_member(
        &self,
        request: group_management::AddMemberRequest,
    ) -> Result<group_management::AddMemberResponse> {
        self.action(&group_management::SERVICE_TYPE, "AddMember", request)
            .await
    }

    async fn remove_member(&self, request: group_management::RemoveMemberRequest) -> Result<()> {
        self.action(&group_management::SERVICE_TYPE, "RemoveMember", request)
            .await
    }

    async fn report_track_buffering_result(
        &self,
        request: group_management::ReportTrackBufferingResultRequest,
    ) -> Result<()> {
        self.action(
            &group_management::SERVICE_TYPE,
            "ReportTrackBufferingResult",
            request,
        )
        .await
    }

    async fn set_source_area_ids(
        &self,
        request: group_management::SetSourceAreaIdsRequest,
    ) -> Result<()> {
        self.action(&group_management::SERVICE_TYPE, "SetSourceAreaIds", request)
            .await
    }
}
impl GroupRenderingControl for SonosDevice {
    async fn get_group_mute(
        &self,
        request: group_rendering_control::GetGroupMuteRequest,
    ) -> Result<group_rendering_control::GetGroupMuteResponse> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "GetGroupMute",
            request,
        )
        .await
    }

    async fn get_group_volume(
        &self,
        request: group_rendering_control::GetGroupVolumeRequest,
    ) -> Result<group_rendering_control::GetGroupVolumeResponse> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "GetGroupVolume",
            request,
        )
        .await
    }

    async fn set_group_mute(
        &self,
        request: group_rendering_control::SetGroupMuteRequest,
    ) -> Result<()> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "SetGroupMute",
            request,
        )
        .await
    }

    async fn set_group_volume(
        &self,
        request: group_rendering_control::SetGroupVolumeRequest,
    ) -> Result<()> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "SetGroupVolume",
            request,
        )
        .await
    }

    async fn set_relative_group_volume(
        &self,
        request: group_rendering_control::SetRelativeGroupVolumeRequest,
    ) -> Result<group_rendering_control::SetRelativeGroupVolumeResponse> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "SetRelativeGroupVolume",
            request,
        )
        .await
    }

    async fn snapshot_group_volume(
        &self,
        request: group_rendering_control::SnapshotGroupVolumeRequest,
    ) -> Result<()> {
        self.action(
            &group_rendering_control::SERVICE_TYPE,
            "SnapshotGroupVolume",
            request,
        )
        .await
    }
}
impl HTControl for SonosDevice {
    async fn commit_learned_ir_codes(
        &self,
        request: ht_control::CommitLearnedIrCodesRequest,
    ) -> Result<()> {
        self.action(&ht_control::SERVICE_TYPE, "CommitLearnedIRCodes", request)
            .await
    }

    async fn get_ir_repeater_state(&self) -> Result<ht_control::GetIrRepeaterStateResponse> {
        self.action(
            &ht_control::SERVICE_TYPE,
            "GetIRRepeaterState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_led_feedback_state(&self) -> Result<ht_control::GetLedFeedbackStateResponse> {
        self.action(
            &ht_control::SERVICE_TYPE,
            "GetLEDFeedbackState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn identify_ir_remote(&self, request: ht_control::IdentifyIrRemoteRequest) -> Result<()> {
        self.action(&ht_control::SERVICE_TYPE, "IdentifyIRRemote", request)
            .await
    }

    async fn is_remote_configured(&self) -> Result<ht_control::IsRemoteConfiguredResponse> {
        self.action(
            &ht_control::SERVICE_TYPE,
            "IsRemoteConfigured",
            crate::soap::Unit {},
        )
        .await
    }

    async fn learn_ir_code(&self, request: ht_control::LearnIrCodeRequest) -> Result<()> {
        self.action(&ht_control::SERVICE_TYPE, "LearnIRCode", request)
            .await
    }

    async fn set_ir_repeater_state(
        &self,
        request: ht_control::SetIrRepeaterStateRequest,
    ) -> Result<()> {
        self.action(&ht_control::SERVICE_TYPE, "SetIRRepeaterState", request)
            .await
    }

    async fn set_led_feedback_state(
        &self,
        request: ht_control::SetLedFeedbackStateRequest,
    ) -> Result<()> {
        self.action(&ht_control::SERVICE_TYPE, "SetLEDFeedbackState", request)
            .await
    }
}
impl MusicServices for SonosDevice {
    async fn get_session_id(
        &self,
        request: music_services::GetSessionIdRequest,
    ) -> Result<music_services::GetSessionIdResponse> {
        self.action(&music_services::SERVICE_TYPE, "GetSessionId", request)
            .await
    }

    async fn list_available_services(
        &self,
    ) -> Result<music_services::ListAvailableServicesResponse> {
        self.action(
            &music_services::SERVICE_TYPE,
            "ListAvailableServices",
            crate::soap::Unit {},
        )
        .await
    }

    async fn update_available_services(&self) -> Result<()> {
        self.action(
            &music_services::SERVICE_TYPE,
            "UpdateAvailableServices",
            crate::soap::Unit {},
        )
        .await
    }
}
impl QPlay for SonosDevice {
    async fn q_play_auth(
        &self,
        request: q_play::QPlayAuthRequest,
    ) -> Result<q_play::QPlayAuthResponse> {
        self.action(&q_play::SERVICE_TYPE, "QPlayAuth", request)
            .await
    }
}
impl Queue for SonosDevice {
    async fn add_multiple_uris(
        &self,
        request: queue::AddMultipleUrisRequest,
    ) -> Result<queue::AddMultipleUrisResponse> {
        self.action(&queue::SERVICE_TYPE, "AddMultipleURIs", request)
            .await
    }

    async fn add_uri(&self, request: queue::AddUriRequest) -> Result<queue::AddUriResponse> {
        self.action(&queue::SERVICE_TYPE, "AddURI", request).await
    }

    async fn attach_queue(
        &self,
        request: queue::AttachQueueRequest,
    ) -> Result<queue::AttachQueueResponse> {
        self.action(&queue::SERVICE_TYPE, "AttachQueue", request)
            .await
    }

    async fn backup(&self) -> Result<()> {
        self.action(&queue::SERVICE_TYPE, "Backup", crate::soap::Unit {})
            .await
    }

    async fn browse(&self, request: queue::BrowseRequest) -> Result<queue::BrowseResponse> {
        self.action(&queue::SERVICE_TYPE, "Browse", request).await
    }

    async fn create_queue(
        &self,
        request: queue::CreateQueueRequest,
    ) -> Result<queue::CreateQueueResponse> {
        self.action(&queue::SERVICE_TYPE, "CreateQueue", request)
            .await
    }

    async fn remove_all_tracks(
        &self,
        request: queue::RemoveAllTracksRequest,
    ) -> Result<queue::RemoveAllTracksResponse> {
        self.action(&queue::SERVICE_TYPE, "RemoveAllTracks", request)
            .await
    }

    async fn remove_track_range(
        &self,
        request: queue::RemoveTrackRangeRequest,
    ) -> Result<queue::RemoveTrackRangeResponse> {
        self.action(&queue::SERVICE_TYPE, "RemoveTrackRange", request)
            .await
    }

    async fn reorder_tracks(
        &self,
        request: queue::ReorderTracksRequest,
    ) -> Result<queue::ReorderTracksResponse> {
        self.action(&queue::SERVICE_TYPE, "ReorderTracks", request)
            .await
    }

    async fn replace_all_tracks(
        &self,
        request: queue::ReplaceAllTracksRequest,
    ) -> Result<queue::ReplaceAllTracksResponse> {
        self.action(&queue::SERVICE_TYPE, "ReplaceAllTracks", request)
            .await
    }

    async fn save_as_sonos_playlist(
        &self,
        request: queue::SaveAsSonosPlaylistRequest,
    ) -> Result<queue::SaveAsSonosPlaylistResponse> {
        self.action(&queue::SERVICE_TYPE, "SaveAsSonosPlaylist", request)
            .await
    }
}
impl RenderingControl for SonosDevice {
    async fn get_bass(
        &self,
        request: rendering_control::GetBassRequest,
    ) -> Result<rendering_control::GetBassResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetBass", request)
            .await
    }

    async fn get_eq(
        &self,
        request: rendering_control::GetEqRequest,
    ) -> Result<rendering_control::GetEqResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetEQ", request)
            .await
    }

    async fn get_headphone_connected(
        &self,
        request: rendering_control::GetHeadphoneConnectedRequest,
    ) -> Result<rendering_control::GetHeadphoneConnectedResponse> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "GetHeadphoneConnected",
            request,
        )
        .await
    }

    async fn get_loudness(
        &self,
        request: rendering_control::GetLoudnessRequest,
    ) -> Result<rendering_control::GetLoudnessResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetLoudness", request)
            .await
    }

    async fn get_mute(
        &self,
        request: rendering_control::GetMuteRequest,
    ) -> Result<rendering_control::GetMuteResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetMute", request)
            .await
    }

    async fn get_output_fixed(
        &self,
        request: rendering_control::GetOutputFixedRequest,
    ) -> Result<rendering_control::GetOutputFixedResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetOutputFixed", request)
            .await
    }

    async fn get_room_calibration_status(
        &self,
        request: rendering_control::GetRoomCalibrationStatusRequest,
    ) -> Result<rendering_control::GetRoomCalibrationStatusResponse> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "GetRoomCalibrationStatus",
            request,
        )
        .await
    }

    async fn get_supports_output_fixed(
        &self,
        request: rendering_control::GetSupportsOutputFixedRequest,
    ) -> Result<rendering_control::GetSupportsOutputFixedResponse> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "GetSupportsOutputFixed",
            request,
        )
        .await
    }

    async fn get_treble(
        &self,
        request: rendering_control::GetTrebleRequest,
    ) -> Result<rendering_control::GetTrebleResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetTreble", request)
            .await
    }

    async fn get_volume(
        &self,
        request: rendering_control::GetVolumeRequest,
    ) -> Result<rendering_control::GetVolumeResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetVolume", request)
            .await
    }

    async fn get_volume_db(
        &self,
        request: rendering_control::GetVolumeDbRequest,
    ) -> Result<rendering_control::GetVolumeDbResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "GetVolumeDB", request)
            .await
    }

    async fn get_volume_db_range(
        &self,
        request: rendering_control::GetVolumeDbRangeRequest,
    ) -> Result<rendering_control::GetVolumeDbRangeResponse> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "GetVolumeDBRange",
            request,
        )
        .await
    }

    async fn ramp_to_volume(
        &self,
        request: rendering_control::RampToVolumeRequest,
    ) -> Result<rendering_control::RampToVolumeResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "RampToVolume", request)
            .await
    }

    async fn reset_basic_eq(
        &self,
        request: rendering_control::ResetBasicEqRequest,
    ) -> Result<rendering_control::ResetBasicEqResponse> {
        self.action(&rendering_control::SERVICE_TYPE, "ResetBasicEQ", request)
            .await
    }

    async fn reset_ext_eq(&self, request: rendering_control::ResetExtEqRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "ResetExtEQ", request)
            .await
    }

    async fn restore_volume_prior_to_ramp(
        &self,
        request: rendering_control::RestoreVolumePriorToRampRequest,
    ) -> Result<()> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "RestoreVolumePriorToRamp",
            request,
        )
        .await
    }

    async fn set_bass(&self, request: rendering_control::SetBassRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetBass", request)
            .await
    }

    async fn set_channel_map(
        &self,
        request: rendering_control::SetChannelMapRequest,
    ) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetChannelMap", request)
            .await
    }

    async fn set_eq(&self, request: rendering_control::SetEqRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetEQ", request)
            .await
    }

    async fn set_loudness(&self, request: rendering_control::SetLoudnessRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetLoudness", request)
            .await
    }

    async fn set_mute(&self, request: rendering_control::SetMuteRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetMute", request)
            .await
    }

    async fn set_output_fixed(
        &self,
        request: rendering_control::SetOutputFixedRequest,
    ) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetOutputFixed", request)
            .await
    }

    async fn set_relative_volume(
        &self,
        request: rendering_control::SetRelativeVolumeRequest,
    ) -> Result<rendering_control::SetRelativeVolumeResponse> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "SetRelativeVolume",
            request,
        )
        .await
    }

    async fn set_room_calibration_status(
        &self,
        request: rendering_control::SetRoomCalibrationStatusRequest,
    ) -> Result<()> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "SetRoomCalibrationStatus",
            request,
        )
        .await
    }

    async fn set_room_calibration_x(
        &self,
        request: rendering_control::SetRoomCalibrationXRequest,
    ) -> Result<()> {
        self.action(
            &rendering_control::SERVICE_TYPE,
            "SetRoomCalibrationX",
            request,
        )
        .await
    }

    async fn set_treble(&self, request: rendering_control::SetTrebleRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetTreble", request)
            .await
    }

    async fn set_volume(&self, request: rendering_control::SetVolumeRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetVolume", request)
            .await
    }

    async fn set_volume_db(&self, request: rendering_control::SetVolumeDbRequest) -> Result<()> {
        self.action(&rendering_control::SERVICE_TYPE, "SetVolumeDB", request)
            .await
    }
}
impl SystemProperties for SonosDevice {
    async fn add_account_x(
        &self,
        request: system_properties::AddAccountXRequest,
    ) -> Result<system_properties::AddAccountXResponse> {
        self.action(&system_properties::SERVICE_TYPE, "AddAccountX", request)
            .await
    }

    async fn add_o_auth_account_x(
        &self,
        request: system_properties::AddOAuthAccountXRequest,
    ) -> Result<system_properties::AddOAuthAccountXResponse> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "AddOAuthAccountX",
            request,
        )
        .await
    }

    async fn do_post_update_tasks(&self) -> Result<()> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "DoPostUpdateTasks",
            crate::soap::Unit {},
        )
        .await
    }

    async fn edit_account_md(
        &self,
        request: system_properties::EditAccountMdRequest,
    ) -> Result<()> {
        self.action(&system_properties::SERVICE_TYPE, "EditAccountMd", request)
            .await
    }

    async fn edit_account_password_x(
        &self,
        request: system_properties::EditAccountPasswordXRequest,
    ) -> Result<()> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "EditAccountPasswordX",
            request,
        )
        .await
    }

    async fn enable_rdm(&self, request: system_properties::EnableRdmRequest) -> Result<()> {
        self.action(&system_properties::SERVICE_TYPE, "EnableRDM", request)
            .await
    }

    async fn get_rdm(&self) -> Result<system_properties::GetRdmResponse> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "GetRDM",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_string(
        &self,
        request: system_properties::GetStringRequest,
    ) -> Result<system_properties::GetStringResponse> {
        self.action(&system_properties::SERVICE_TYPE, "GetString", request)
            .await
    }

    async fn get_web_code(
        &self,
        request: system_properties::GetWebCodeRequest,
    ) -> Result<system_properties::GetWebCodeResponse> {
        self.action(&system_properties::SERVICE_TYPE, "GetWebCode", request)
            .await
    }

    async fn provision_credentialed_trial_account_x(
        &self,
        request: system_properties::ProvisionCredentialedTrialAccountXRequest,
    ) -> Result<system_properties::ProvisionCredentialedTrialAccountXResponse> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "ProvisionCredentialedTrialAccountX",
            request,
        )
        .await
    }

    async fn refresh_account_credentials_x(
        &self,
        request: system_properties::RefreshAccountCredentialsXRequest,
    ) -> Result<()> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "RefreshAccountCredentialsX",
            request,
        )
        .await
    }

    async fn remove(&self, request: system_properties::RemoveRequest) -> Result<()> {
        self.action(&system_properties::SERVICE_TYPE, "Remove", request)
            .await
    }

    async fn remove_account(&self, request: system_properties::RemoveAccountRequest) -> Result<()> {
        self.action(&system_properties::SERVICE_TYPE, "RemoveAccount", request)
            .await
    }

    async fn replace_account_x(
        &self,
        request: system_properties::ReplaceAccountXRequest,
    ) -> Result<system_properties::ReplaceAccountXResponse> {
        self.action(&system_properties::SERVICE_TYPE, "ReplaceAccountX", request)
            .await
    }

    async fn reset_third_party_credentials(&self) -> Result<()> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "ResetThirdPartyCredentials",
            crate::soap::Unit {},
        )
        .await
    }

    async fn set_account_nickname_x(
        &self,
        request: system_properties::SetAccountNicknameXRequest,
    ) -> Result<()> {
        self.action(
            &system_properties::SERVICE_TYPE,
            "SetAccountNicknameX",
            request,
        )
        .await
    }

    async fn set_string(&self, request: system_properties::SetStringRequest) -> Result<()> {
        self.action(&system_properties::SERVICE_TYPE, "SetString", request)
            .await
    }
}
impl VirtualLineIn for SonosDevice {
    async fn next(&self, request: virtual_line_in::NextRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "Next", request)
            .await
    }

    async fn pause(&self, request: virtual_line_in::PauseRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "Pause", request)
            .await
    }

    async fn play(&self, request: virtual_line_in::PlayRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "Play", request)
            .await
    }

    async fn previous(&self, request: virtual_line_in::PreviousRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "Previous", request)
            .await
    }

    async fn set_volume(&self, request: virtual_line_in::SetVolumeRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "SetVolume", request)
            .await
    }

    async fn start_transmission(
        &self,
        request: virtual_line_in::StartTransmissionRequest,
    ) -> Result<virtual_line_in::StartTransmissionResponse> {
        self.action(&virtual_line_in::SERVICE_TYPE, "StartTransmission", request)
            .await
    }

    async fn stop(&self, request: virtual_line_in::StopRequest) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "Stop", request)
            .await
    }

    async fn stop_transmission(
        &self,
        request: virtual_line_in::StopTransmissionRequest,
    ) -> Result<()> {
        self.action(&virtual_line_in::SERVICE_TYPE, "StopTransmission", request)
            .await
    }
}
impl ZoneGroupTopology for SonosDevice {
    async fn begin_software_update(
        &self,
        request: zone_group_topology::BeginSoftwareUpdateRequest,
    ) -> Result<()> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "BeginSoftwareUpdate",
            request,
        )
        .await
    }

    async fn check_for_update(
        &self,
        request: zone_group_topology::CheckForUpdateRequest,
    ) -> Result<zone_group_topology::CheckForUpdateResponse> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "CheckForUpdate",
            request,
        )
        .await
    }

    async fn get_zone_group_attributes(
        &self,
    ) -> Result<zone_group_topology::GetZoneGroupAttributesResponse> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "GetZoneGroupAttributes",
            crate::soap::Unit {},
        )
        .await
    }

    async fn get_zone_group_state(&self) -> Result<zone_group_topology::GetZoneGroupStateResponse> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "GetZoneGroupState",
            crate::soap::Unit {},
        )
        .await
    }

    async fn register_mobile_device(
        &self,
        request: zone_group_topology::RegisterMobileDeviceRequest,
    ) -> Result<()> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "RegisterMobileDevice",
            request,
        )
        .await
    }

    async fn report_alarm_started_running(&self) -> Result<()> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "ReportAlarmStartedRunning",
            crate::soap::Unit {},
        )
        .await
    }

    async fn report_unresponsive_device(
        &self,
        request: zone_group_topology::ReportUnresponsiveDeviceRequest,
    ) -> Result<()> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "ReportUnresponsiveDevice",
            request,
        )
        .await
    }

    async fn submit_diagnostics(
        &self,
        request: zone_group_topology::SubmitDiagnosticsRequest,
    ) -> Result<zone_group_topology::SubmitDiagnosticsResponse> {
        self.action(
            &zone_group_topology::SERVICE_TYPE,
            "SubmitDiagnostics",
            request,
        )
        .await
    }
}
